<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yzp&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-06T14:28:50.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>yzp</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Qtree1</title>
    <link href="http://yoursite.com/2019/03/06/Qtree1/"/>
    <id>http://yoursite.com/2019/03/06/Qtree1/</id>
    <published>2019-03-06T14:26:54.000Z</published>
    <updated>2019-03-06T14:28:50.000Z</updated>
    
    <content type="html"><![CDATA[<div class="image" style="background-image:url(https://ws1.sinaimg.cn/large/0072Vf1pgy1foxli41klcj31hc0u0asv.jpg)"></div><p><a href="https://www.luogu.org/problemnew/show/P4114" target="_blank" rel="noopener">题面</a></p><h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><p>很裸的一道树剖题，我们把边权化为点权就可以了。注意不要加上两点的LCA。当我们两个点跳到同一条链上时，深度更浅的点就是两点的LCA了。我们只需查询区间$[id[x]+1,id[y]]$就可以了。<br><a id="more"></a></p><h5 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">int</span> size[maxn],son[maxn],n,head[maxn],tot,top[maxn],fa[maxn],dep[maxn];</span><br><span class="line"><span class="keyword">int</span> cnt,id[maxn],a[maxn],val[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> maxx;</span><br><span class="line">&#125;tr[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> next,to,w;</span><br><span class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++tot] = (edge)&#123;head[u],v,w&#125;;</span><br><span class="line">    head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dep[x] = dep[f] + <span class="number">1</span>;</span><br><span class="line">    size[x] = <span class="number">1</span>;fa[x] = f;</span><br><span class="line">    <span class="keyword">int</span> maxson = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[x] ; i ; i = e[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(v == f)<span class="keyword">continue</span>;</span><br><span class="line">        val[v] = e[i].w;</span><br><span class="line">        dfs1(v,x);</span><br><span class="line">        size[x] += size[v];</span><br><span class="line">        <span class="keyword">if</span>(size[v] &gt; maxson)son[x] = v,maxson = size[v];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> topf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    top[x] = topf;id[x] = ++cnt;</span><br><span class="line">    a[cnt] = val[x];</span><br><span class="line">    <span class="keyword">if</span>(!son[x])<span class="keyword">return</span>;</span><br><span class="line">    dfs2(son[x],topf);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[x] ; i ; i = e[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(v == fa[x] <span class="keyword">or</span> v == son[x])<span class="keyword">continue</span>;</span><br><span class="line">        dfs2(v,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> root,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">        tr[root].maxx = a[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build(root &lt;&lt; <span class="number">1</span>,l,mid);</span><br><span class="line">    build(root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,mid + <span class="number">1</span>,r);</span><br><span class="line">    tr[root].maxx = max(tr[root &lt;&lt; <span class="number">1</span>].maxx,tr[root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].maxx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> root,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == x <span class="keyword">and</span> r == x)&#123;</span><br><span class="line">        tr[root].maxx = b;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= mid)change(root &lt;&lt; <span class="number">1</span>,l,mid,x,b);</span><br><span class="line">    <span class="keyword">if</span>(x &gt; mid)change(root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,mid + <span class="number">1</span>,r,x,b);</span><br><span class="line">    tr[root].maxx = max(tr[root &lt;&lt; <span class="number">1</span>].maxx,tr[root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].maxx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> root,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= L <span class="keyword">and</span> r &lt;= R)<span class="keyword">return</span> tr[root].maxx;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= mid)ans = max(ans,query(root &lt;&lt; <span class="number">1</span>,l,mid,L,R));</span><br><span class="line">    <span class="keyword">if</span>(R &gt; mid)ans = max(ans,query(root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,mid + <span class="number">1</span>,r,L,R));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">road_ask</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(top[x] != top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[top[x]] &lt; dep[top[y]])swap(x,y);</span><br><span class="line">        ans = max(ans,query(<span class="number">1</span>,<span class="number">1</span>,n,id[top[x]],id[x]));</span><br><span class="line">        x = fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dep[x] &gt; dep[y])swap(x,y);</span><br><span class="line">    ans = max(ans,query(<span class="number">1</span>,<span class="number">1</span>,n,id[x] + <span class="number">1</span>,id[y]));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>,u,v,w ; i &lt; n ; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        add(u,v,w);add(v,u,w);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs1(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    dfs2(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="built_in">string</span> opt;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; opt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(opt == <span class="string">"DONE"</span>)<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">int</span> a,b,x;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="keyword">if</span>(opt == <span class="string">"CHANGE"</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> v = e[a * <span class="number">2</span> - <span class="number">1</span>].to,u = e[a * <span class="number">2</span>].to;</span><br><span class="line">            <span class="keyword">if</span>(dep[v] &gt; dep[u])x = v;</span><br><span class="line">            <span class="keyword">else</span> x = u;</span><br><span class="line">            change(<span class="number">1</span>,<span class="number">1</span>,n,id[x],b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(opt == <span class="string">"QUERY"</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a == b)&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; road_ask(a,b) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;image&quot; style=&quot;background-image:url(https://ws1.sinaimg.cn/large/0072Vf1pgy1foxli41klcj31hc0u0asv.jpg)&quot;&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P4114&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题面&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;思路：&quot;&gt;&lt;a href=&quot;#思路：&quot; class=&quot;headerlink&quot; title=&quot;思路：&quot;&gt;&lt;/a&gt;思路：&lt;/h5&gt;&lt;p&gt;很裸的一道树剖题，我们把边权化为点权就可以了。注意不要加上两点的LCA。当我们两个点跳到同一条链上时，深度更浅的点就是两点的LCA了。我们只需查询区间$[id[x]+1,id[y]]$就可以了。&lt;br&gt;
    
    </summary>
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="树链剖分" scheme="http://yoursite.com/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>USACO18DEC-Fine_Dining</title>
    <link href="http://yoursite.com/2019/03/05/USACO18DEC-Fine-Dining/"/>
    <id>http://yoursite.com/2019/03/05/USACO18DEC-Fine-Dining/</id>
    <published>2019-03-05T14:09:06.000Z</published>
    <updated>2019-03-06T11:05:37.000Z</updated>
    
    <content type="html"><![CDATA[<p><div class="image" style="background-image:url(https://ws4.sinaimg.cn/large/0072Vf1pgy1foxkcwa5wxj31hc0u04hn.jpg)"></div><br><a href="https://www.luogu.org/problemnew/show/P5122" target="_blank" rel="noopener">题面</a></p><h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><p>我们先考虑暴力，我们可以先按题意模拟先从N点跑一次最短路，然后我们在从每个草垛跑一次最短路，时间复杂度$O(kn)$，得到$70$分的好成绩。我们再考虑优化，我们发现我们从每个草垛跑最短路时跑了许多冗余状态。<a id="more"></a>我们可以考虑在图上动手脚，我们将图进行分层，我们先在原图上跑一遍SPFA，然后再将图复制一份，从第一个图的干草跺向第二图的相同节点连一条-w的有向边。最后比较两次的dis值即可</p><h5 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// luogu-judger-enable-o2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> dis[maxn],dist[maxn],n,m,k,head[maxn],tot;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> next,to,w;</span><br><span class="line">&#125;e[maxm &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++tot] = (edge)&#123;head[u],v,w&#125;;</span><br><span class="line">    head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> st)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dis));</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">    q.push(st);vis[st] = <span class="number">1</span>;dis[st] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.size())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x = q.front();q.pop();vis[x] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[x] ; i ; i = e[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dis[v] &gt; dis[x] + e[i].w)&#123;</span><br><span class="line">                dis[v] = dis[x] + e[i].w;</span><br><span class="line">                <span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">                    vis[v] = <span class="number">1</span>;</span><br><span class="line">                    q.push(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa2</span><span class="params">(<span class="keyword">int</span> st)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dist));</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">    vis[st] = <span class="number">1</span>;</span><br><span class="line">    q.push(st);</span><br><span class="line">    dist[st] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.size())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x = q.front();q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[x] ; i ; i = e[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dist[v] &gt; dist[x] + e[i].w)&#123;</span><br><span class="line">                dist[v] = dist[x] + e[i].w;</span><br><span class="line">                <span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">                    dist[v] = dist[x] + e[i].w;</span><br><span class="line">                    q.push(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>,u,v,w ; i &lt;= m ; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        add(u,v,w);add(v,u,w);</span><br><span class="line">        add(u + n,v + n,w);add(v + n,u + n,w);</span><br><span class="line">    &#125;</span><br><span class="line">    spfa(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>,x,y ; i &lt;= k ; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        add(x,x + n,-y);</span><br><span class="line">    &#125;</span><br><span class="line">    spfa2(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; n ; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dis[i] &gt;= dist[i + n])<span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;div class=&quot;image&quot; style=&quot;background-image:url(https://ws4.sinaimg.cn/large/0072Vf1pgy1foxkcwa5wxj31hc0u04hn.jpg)&quot;&gt;&lt;/div&gt;&lt;br&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P5122&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题面&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;思路：&quot;&gt;&lt;a href=&quot;#思路：&quot; class=&quot;headerlink&quot; title=&quot;思路：&quot;&gt;&lt;/a&gt;思路：&lt;/h5&gt;&lt;p&gt;我们先考虑暴力，我们可以先按题意模拟先从N点跑一次最短路，然后我们在从每个草垛跑一次最短路，时间复杂度$O(kn)$，得到$70$分的好成绩。我们再考虑优化，我们发现我们从每个草垛跑最短路时跑了许多冗余状态。
    
    </summary>
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="分层图" scheme="http://yoursite.com/tags/%E5%88%86%E5%B1%82%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>[USACO18DEC]Cowpatibility</title>
    <link href="http://yoursite.com/2019/03/05/USACO18DEC-Cowpatibility/"/>
    <id>http://yoursite.com/2019/03/05/USACO18DEC-Cowpatibility/</id>
    <published>2019-03-05T10:02:09.000Z</published>
    <updated>2019-03-06T11:47:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><div class="image" style="background:url(https://ws2.sinaimg.cn/large/0072Vf1pgy1fodqiuq34vj31kw0zkhdt.jpg)"></div><br><a href="https://www.luogu.org/problemnew/show/P5123" target="_blank" rel="noopener">题面</a></p><h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><h6 id="正解做法：考虑容斥。"><a href="#正解做法：考虑容斥。" class="headerlink" title="正解做法：考虑容斥。"></a>正解做法：考虑容斥。</h6><p>不能和谐的奶牛的对数等于总对数-和谐的奶牛数。<br>我们可以统计出与当前的奶牛口味有1个相同的奶牛数，有2个相同的……<br>根据容斥，奇数加，偶数减。我们就可以在$O(2^5N)$的时间复杂度内完成了。<br><a id="more"></a></p><h6 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> out = <span class="number">0</span>;<span class="keyword">bool</span> flag = <span class="number">0</span>;<span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;flag = (ch == <span class="string">'-'</span>);ch = getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;out = (out &lt;&lt; <span class="number">1</span>) + (out &lt;&lt; <span class="number">3</span>) + ch - <span class="string">'0'</span>;ch = getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> flag?-out:out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ice</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x[<span class="number">6</span>];</span><br><span class="line">    ice()&#123;x[<span class="number">1</span>] = x[<span class="number">2</span>] = x[<span class="number">3</span>] = x[<span class="number">4</span>] = x[<span class="number">5</span>] = <span class="number">-1</span>;&#125;<span class="comment">//构造函数，此处需赋值为-1，因为我们是按照^来比较大小的，不能赋值为0；</span></span><br><span class="line">&#125;a[maxn];</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> ice &amp;q,<span class="keyword">const</span> ice &amp;p)&#123;<span class="comment">//重载&lt;号比较大小</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= <span class="number">5</span> ; ++ i)</span><br><span class="line">        <span class="keyword">if</span>(q.x[i] ^ p.x[i])<span class="keyword">return</span> q.x[i] &lt; p.x[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>&lt;ice,<span class="keyword">long</span> <span class="keyword">long</span>&gt;mp;<span class="comment">//用mp存某个方案有多少个奶牛</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,ans;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = read();</span><br><span class="line">    ans = n * (n - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; ++ i)</span><br><span class="line">        <span class="keyword">for</span>(re <span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;= <span class="number">5</span> ; ++ j)</span><br><span class="line">            a[i].x[j] = read();</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        sort(a[i].x + <span class="number">1</span>,a[i].x + <span class="number">6</span>);<span class="comment">//排序方便比较</span></span><br><span class="line">        <span class="keyword">for</span>(re <span class="keyword">int</span> j = <span class="number">1</span>,top ; j &lt; (<span class="number">1</span> &lt;&lt; <span class="number">5</span>) ; ++ j)<span class="comment">//枚举子集</span></span><br><span class="line">        &#123;</span><br><span class="line">            ice tmp;</span><br><span class="line">            top = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(re <span class="keyword">int</span> k = <span class="number">0</span>;k &lt; <span class="number">5</span>;++ k)<span class="keyword">if</span>(j &amp; (<span class="number">1</span>&lt;&lt;k))tmp.x[++top]=a[i].x[k+<span class="number">1</span>];</span><br><span class="line">            ans -= (top&amp;<span class="number">1</span>?<span class="number">1</span>:<span class="number">-1</span>) * mp[tmp];<span class="comment">//容斥</span></span><br><span class="line">            ++ mp[tmp];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是由于这个做法比较的常数比较大，所以会跑的特别慢。以下介绍一种暴力但是常数特别小的做法。</p><h6 id="暴力做法"><a href="#暴力做法" class="headerlink" title="暴力做法"></a>暴力做法</h6><p>我们用一个$map&lt;int,bitset<maxn> &gt;$记录当前的数有哪些奶牛有。然后用$bitset$优化，就可以过了，时间复杂度是$O(n^2)$的。但是$bitset$优化了很大的常数，并且位运算特快。<del>所以比正解快了一倍</del></maxn></p><h6 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">bitset</span>&lt;maxn&gt; &gt;mp;</span><br><span class="line"><span class="keyword">int</span> n,a[maxn][<span class="number">10</span>],ans;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;= <span class="number">5</span> ; ++ j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i][j];</span><br><span class="line">            mp[a[i][j]].<span class="built_in">set</span>(i);<span class="comment">//将第i位数字置为1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">bitset</span>&lt;maxn&gt;q;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;= <span class="number">5</span> ; ++ j)q |= mp[a[i][j]];<span class="comment">//统计有哪些奶牛有这种口味</span></span><br><span class="line">        ans += n - q.count();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans / <span class="number">2</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;div class=&quot;image&quot; style=&quot;background:url(https://ws2.sinaimg.cn/large/0072Vf1pgy1fodqiuq34vj31kw0zkhdt.jpg)&quot;&gt;&lt;/div&gt;&lt;br&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P5123&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题面&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;思路：&quot;&gt;&lt;a href=&quot;#思路：&quot; class=&quot;headerlink&quot; title=&quot;思路：&quot;&gt;&lt;/a&gt;思路：&lt;/h5&gt;&lt;h6 id=&quot;正解做法：考虑容斥。&quot;&gt;&lt;a href=&quot;#正解做法：考虑容斥。&quot; class=&quot;headerlink&quot; title=&quot;正解做法：考虑容斥。&quot;&gt;&lt;/a&gt;正解做法：考虑容斥。&lt;/h6&gt;&lt;p&gt;不能和谐的奶牛的对数等于总对数-和谐的奶牛数。&lt;br&gt;我们可以统计出与当前的奶牛口味有1个相同的奶牛数，有2个相同的……&lt;br&gt;根据容斥，奇数加，偶数减。我们就可以在$O(2^5N)$的时间复杂度内完成了。&lt;br&gt;
    
    </summary>
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="容斥" scheme="http://yoursite.com/tags/%E5%AE%B9%E6%96%A5/"/>
    
  </entry>
  
  <entry>
    <title>[USACO18DEC]Teamwork</title>
    <link href="http://yoursite.com/2019/03/03/USACO18DEC-Teamwork/"/>
    <id>http://yoursite.com/2019/03/03/USACO18DEC-Teamwork/</id>
    <published>2019-03-03T04:45:00.000Z</published>
    <updated>2019-03-07T10:43:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><div class="image" style="background:url(https://ws1.sinaimg.cn/large/0072Vf1pgy1foxk6q3dx1j31hc0u0gtw.jpg)"></div><br><a href="https://www.luogu.org/problemnew/show/P5124" target="_blank" rel="noopener">题面</a><br>一个简单的dp</p><h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><p>我们设dp[i][j]表示我们考虑到了第i个数，最后一个块的大小为j，我们有两种决策：<br>1.我们把第i个数独立，即$dp[i][1]$会由$dp[i-1]<a href="1\leq j \le k">j</a>$转移过来。</p><p>2.我们把第i个数加入前一个块，即$dp[i][j]$会由$dp[i-1][j-1]$转移过来。</p><p>那么怎么算贡献呢？我们可以考虑记上一个数组$maxx[i][j]$表示最后一个块大小为$j$时块内最大的数。更新时先减去原先的最大的数乘以块的大小，再加上新的最大值乘以新的块的大小。<br><a id="more"></a><br>由于每个决策点都只与前一个决策点有关我们可以考虑滚动数组优化一维空间，(我只优化了$maxx$数组)读者可优化$dp$数组。</p><h5 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// luogu-judger-enable-o2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxk = <span class="number">1e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxk],maxx[<span class="number">2</span>][maxk],a[maxn],ans,n,k;<span class="comment">//dp表示当前决策点以及最后一个块的大小,maxx为最后一个块内的最大值</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; ++ i)<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;= min(i,k) ; ++ j)</span><br><span class="line">            dp[i][<span class="number">1</span>] = max(dp[i][<span class="number">1</span>],dp[i - <span class="number">1</span>][j] + a[i]);<span class="comment">//由上一个状态转移</span></span><br><span class="line">        maxx[i&amp;<span class="number">1</span>][<span class="number">1</span>] = a[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span> ; j &lt; min(i,k) ; ++ j)</span><br><span class="line">        &#123;</span><br><span class="line">            maxx[i&amp;<span class="number">1</span>][j + <span class="number">1</span>] = max(maxx[(i - <span class="number">1</span>)&amp;<span class="number">1</span>][j],a[i]);</span><br><span class="line">            dp[i][j + <span class="number">1</span>] = dp[i - <span class="number">1</span>][j] - maxx[(i - <span class="number">1</span>)&amp;<span class="number">1</span>][j] * j + maxx[i&amp;<span class="number">1</span>][j + <span class="number">1</span>] * (j + <span class="number">1</span>);<span class="comment">//把i并到它上一个中。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= k ; ++ i)</span><br><span class="line">        ans = max(ans,dp[n][i]);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;div class=&quot;image&quot; style=&quot;background:url(https://ws1.sinaimg.cn/large/0072Vf1pgy1foxk6q3dx1j31hc0u0gtw.jpg)&quot;&gt;&lt;/div&gt;&lt;br&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P5124&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题面&lt;/a&gt;&lt;br&gt;一个简单的dp&lt;/p&gt;
&lt;h5 id=&quot;思路：&quot;&gt;&lt;a href=&quot;#思路：&quot; class=&quot;headerlink&quot; title=&quot;思路：&quot;&gt;&lt;/a&gt;思路：&lt;/h5&gt;&lt;p&gt;我们设dp[i][j]表示我们考虑到了第i个数，最后一个块的大小为j，我们有两种决策：&lt;br&gt;1.我们把第i个数独立，即$dp[i][1]$会由$dp[i-1]&lt;a href=&quot;1\leq j \le k&quot;&gt;j&lt;/a&gt;$转移过来。&lt;/p&gt;
&lt;p&gt;2.我们把第i个数加入前一个块，即$dp[i][j]$会由$dp[i-1][j-1]$转移过来。&lt;/p&gt;
&lt;p&gt;那么怎么算贡献呢？我们可以考虑记上一个数组$maxx[i][j]$表示最后一个块大小为$j$时块内最大的数。更新时先减去原先的最大的数乘以块的大小，再加上新的最大值乘以新的块的大小。&lt;br&gt;
    
    </summary>
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="动态规划,动规,dp" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E5%8A%A8%E8%A7%84-dp/"/>
    
  </entry>
  
  <entry>
    <title>软件包管理器</title>
    <link href="http://yoursite.com/2019/03/02/%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/"/>
    <id>http://yoursite.com/2019/03/02/软件包管理器/</id>
    <published>2019-03-02T09:51:25.000Z</published>
    <updated>2019-03-06T11:27:55.000Z</updated>
    
    <content type="html"><![CDATA[<p><div class="image" style="background-image:url(https://ws1.sinaimg.cn/large/0072Vf1pgy1foxkcs4066j31hc0u0wrj.jpg)"></div></p><h5 id="题面"><a href="#题面" class="headerlink" title="题面"></a><a href="https://www.luogu.org/problemnew/show/P2146" target="_blank" rel="noopener">题面</a></h5><h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><p>依赖关系不存在环，说明这是一颗有向树，0为根节点(不依赖任何的软件包)。安装时是查询x到根路径上权值为0的节点个数，然后再将x到根路径上的节点权值全部变为1就行了。卸载时查询x的子树中有多少个权值为1的节点个数，然后再将x及其子树的所有节点全部变为0就行了。上述操作只需用树链剖分实现，把线段树改为01可区间修改的线段树就可以了。</p><a id="more"></a><h5 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// luogu-judger-enable-o2//原谅我不可饶恕的常数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,fa[maxn],size[maxn],son[maxn],id[maxn],dep[maxn],top[maxn],cnt,q;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;e[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val,tag;</span><br><span class="line">&#125;tr[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dep[x] = dep[fa[x]] + <span class="number">1</span>;</span><br><span class="line">    size[x] = <span class="number">1</span>;<span class="keyword">int</span> maxson = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; e[x].size() ; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[x][i];</span><br><span class="line">        fa[v] = x;</span><br><span class="line">        dfs1(v);</span><br><span class="line">        size[x] += size[v];</span><br><span class="line">        <span class="keyword">if</span>(size[v] &gt; maxson)maxson = size[v],son[x] = v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> topf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    top[x] = topf;</span><br><span class="line">    id[x] = ++cnt;</span><br><span class="line">    <span class="keyword">if</span>(!son[x])<span class="keyword">return</span>;</span><br><span class="line">    dfs2(son[x],topf);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; e[x].size() ; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[x][i];</span><br><span class="line">        <span class="keyword">if</span>(v == son[x])<span class="keyword">continue</span>;</span><br><span class="line">        dfs2(v,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[root].val = (tr[root &lt;&lt; <span class="number">1</span>].val + tr[root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> root,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[root].tag = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == r)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build(root &lt;&lt; <span class="number">1</span>,l,mid);</span><br><span class="line">    build(root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,mid + <span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> root,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[root].tag == <span class="number">0</span>)&#123;</span><br><span class="line">        tr[root &lt;&lt; <span class="number">1</span>].val = <span class="number">0</span>;</span><br><span class="line">        tr[root &lt;&lt; <span class="number">1</span>].tag = <span class="number">0</span>;</span><br><span class="line">        tr[root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].val = <span class="number">0</span>;</span><br><span class="line">        tr[root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].tag = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tr[root].tag == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        tr[root &lt;&lt; <span class="number">1</span>].val = mid - l + <span class="number">1</span>;</span><br><span class="line">        tr[root &lt;&lt; <span class="number">1</span>].tag = <span class="number">1</span>;</span><br><span class="line">        tr[root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].val = r - mid;</span><br><span class="line">        tr[root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].tag = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tr[root].tag = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query0</span><span class="params">(<span class="keyword">int</span> root,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= L <span class="keyword">and</span> r &lt;= R)<span class="keyword">return</span> r - l + <span class="number">1</span> - tr[root].val;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    push_down(root,l,r);</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= mid)ans += query0(root &lt;&lt; <span class="number">1</span>,l,mid,L,R);</span><br><span class="line">    <span class="keyword">if</span>(R &gt; mid)ans += query0(root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,mid + <span class="number">1</span>,r,L,R);</span><br><span class="line">    update(root);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query1</span><span class="params">(<span class="keyword">int</span> root,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= L <span class="keyword">and</span> r &lt;= R)<span class="keyword">return</span> tr[root].val;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    push_down(root,l,r);</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= mid)ans += query1(root &lt;&lt; <span class="number">1</span>,l,mid,L,R);</span><br><span class="line">    <span class="keyword">if</span>(R &gt; mid)ans += query1(root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,mid + <span class="number">1</span>,r,L,R);</span><br><span class="line">    update(root);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> root,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> opt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= L <span class="keyword">and</span> r &lt;= R)&#123;</span><br><span class="line">        <span class="keyword">if</span>(opt == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            tr[root].val = <span class="number">0</span>;</span><br><span class="line">            tr[root].tag = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(opt == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            tr[root].val = r - l + <span class="number">1</span>;</span><br><span class="line">            tr[root].tag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    push_down(root,l,r);</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= mid)change(root &lt;&lt; <span class="number">1</span>,l,mid,L,R,opt);</span><br><span class="line">    <span class="keyword">if</span>(R &gt; mid)change(root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,mid + <span class="number">1</span>,r,L,R,opt);</span><br><span class="line">    update(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">road_ask</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(top[x] != top[<span class="number">0</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        ans += query0(<span class="number">1</span>,<span class="number">1</span>,n,id[top[x]],id[x]);</span><br><span class="line">        x = fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    ans += query0(<span class="number">1</span>,<span class="number">1</span>,n,id[<span class="number">0</span>],id[x]);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Install</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top[x] != top[<span class="number">0</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        change(<span class="number">1</span>,<span class="number">1</span>,n,id[top[x]],id[x],<span class="number">1</span>);</span><br><span class="line">        x = fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    change(<span class="number">1</span>,<span class="number">1</span>,n,id[<span class="number">0</span>],id[x],<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">son_ask</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> query1(<span class="number">1</span>,<span class="number">1</span>,n,id[x],id[x] + size[x] - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Uninstall</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    change(<span class="number">1</span>,<span class="number">1</span>,n,id[x],id[x] + size[x] - <span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>,x ; i &lt; n ; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">        e[x].push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs1(<span class="number">0</span>);</span><br><span class="line">    dfs2(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span>(q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> opt;<span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; opt &gt;&gt; x;</span><br><span class="line">        <span class="keyword">if</span>(opt == <span class="string">"install"</span>)<span class="built_in">cout</span> &lt;&lt; road_ask(x) &lt;&lt; <span class="built_in">endl</span>,Install(x);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; son_ask(x) &lt;&lt; <span class="built_in">endl</span>,Uninstall(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;div class=&quot;image&quot; style=&quot;background-image:url(https://ws1.sinaimg.cn/large/0072Vf1pgy1foxkcs4066j31hc0u0wrj.jpg)&quot;&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h5 id=&quot;题面&quot;&gt;&lt;a href=&quot;#题面&quot; class=&quot;headerlink&quot; title=&quot;题面&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P2146&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题面&lt;/a&gt;&lt;/h5&gt;&lt;h5 id=&quot;思路：&quot;&gt;&lt;a href=&quot;#思路：&quot; class=&quot;headerlink&quot; title=&quot;思路：&quot;&gt;&lt;/a&gt;思路：&lt;/h5&gt;&lt;p&gt;依赖关系不存在环，说明这是一颗有向树，0为根节点(不依赖任何的软件包)。安装时是查询x到根路径上权值为0的节点个数，然后再将x到根路径上的节点权值全部变为1就行了。卸载时查询x的子树中有多少个权值为1的节点个数，然后再将x及其子树的所有节点全部变为0就行了。上述操作只需用树链剖分实现，把线段树改为01可区间修改的线段树就可以了。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="树链剖分" scheme="http://yoursite.com/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>树的统计</title>
    <link href="http://yoursite.com/2019/03/02/%E6%A0%91%E7%9A%84%E7%BB%9F%E8%AE%A1/"/>
    <id>http://yoursite.com/2019/03/02/树的统计/</id>
    <published>2019-03-02T09:49:42.000Z</published>
    <updated>2019-03-06T11:16:32.000Z</updated>
    
    <content type="html"><![CDATA[<p><div class="image" style="background-image:url(https://ws4.sinaimg.cn/large/0072Vf1pgy1foxlod238zj31hc0u0nj6.jpg)"></div></p><h6 id="题面"><a href="#题面" class="headerlink" title="题面"></a><a href="https://www.luogu.org/problemnew/show/P2590" target="_blank" rel="noopener">题面</a></h6><h6 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h6><p>树链剖分模板题，1操作直接修改，2把线段树维护信息加上区间最大值<br><a id="more"></a></p><h6 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="keyword">int</span> n,head[maxn],tot,dep[maxn],fa[maxn],son[maxn],a[maxn],top[maxn],cnt;</span><br><span class="line"><span class="keyword">int</span> id[maxn],size[maxn],m,w[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> next,to;</span><br><span class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val,maxx;</span><br><span class="line">&#125;tr[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++tot] = (edge)&#123;head[u],v&#125;;</span><br><span class="line">    head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> f,<span class="keyword">int</span> deep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dep[x] = deep;</span><br><span class="line">    fa[x] = f;</span><br><span class="line">    size[x] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> maxson = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[x] ; i ; i = e[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(v == f)<span class="keyword">continue</span>;</span><br><span class="line">        dfs1(v,x,deep + <span class="number">1</span>);</span><br><span class="line">        size[x] += size[v];</span><br><span class="line">        <span class="keyword">if</span>(size[v] &gt; maxson)son[x] = v,maxson = size[v];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> topf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    id[x] = ++ cnt;</span><br><span class="line">    a[cnt] = w[x];</span><br><span class="line">    top[x] = topf;</span><br><span class="line">    <span class="keyword">if</span>(!son[x])<span class="keyword">return</span>;</span><br><span class="line">    dfs2(son[x],topf);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[x] ; i ; i = e[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(v == fa[x] <span class="keyword">or</span> v == son[x])<span class="keyword">continue</span>;</span><br><span class="line">        dfs2(v,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[root].val = (tr[root &lt;&lt; <span class="number">1</span>].val + tr[root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].val);</span><br><span class="line">    tr[root].maxx = max(tr[root &lt;&lt; <span class="number">1</span>].maxx,tr[root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].maxx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> root,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">        tr[root].val = a[l];</span><br><span class="line">        tr[root].maxx = a[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build(root &lt;&lt; <span class="number">1</span>,l,mid);</span><br><span class="line">    build(root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,mid + <span class="number">1</span>,r);</span><br><span class="line">    update(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query_max</span><span class="params">(<span class="keyword">int</span> root,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = -inf;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= L <span class="keyword">and</span> r &lt;= R)<span class="keyword">return</span> tr[root].maxx;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= mid)ans = max(ans,query_max(root &lt;&lt; <span class="number">1</span>,l,mid,L,R));</span><br><span class="line">    <span class="keyword">if</span>(R &gt; mid)ans = max(ans,query_max(root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,mid + <span class="number">1</span>,r,L,R));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query_sum</span><span class="params">(<span class="keyword">int</span> root,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= L <span class="keyword">and</span> r &lt;= R)<span class="keyword">return</span> tr[root].val;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= mid)ans += query_sum(root &lt;&lt; <span class="number">1</span>,l,mid,L,R);</span><br><span class="line">    <span class="keyword">if</span>(R &gt; mid)ans += query_sum(root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,mid + <span class="number">1</span>,r,L,R);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qmax</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = -inf;</span><br><span class="line">    <span class="keyword">while</span>(top[x] != top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[top[x]] &lt; dep[top[y]])swap(x,y);</span><br><span class="line">        ans = max(ans,query_max(<span class="number">1</span>,<span class="number">1</span>,n,id[top[x]],id[x]));</span><br><span class="line">        x = fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dep[x] &gt; dep[y])swap(x,y);</span><br><span class="line">    ans = max(ans,query_max(<span class="number">1</span>,<span class="number">1</span>,n,id[x],id[y]));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qsum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(top[x] != top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[top[x]] &lt; dep[top[y]])swap(x,y);</span><br><span class="line">        ans += query_sum(<span class="number">1</span>,<span class="number">1</span>,n,id[top[x]],id[x]);</span><br><span class="line">        x = fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dep[x] &gt; dep[y])swap(x,y);</span><br><span class="line">    ans += query_sum(<span class="number">1</span>,<span class="number">1</span>,n,id[x],id[y]);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> root,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == x <span class="keyword">and</span> r == x)&#123;</span><br><span class="line">        tr[root].val = y;</span><br><span class="line">        tr[root].maxx = y;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= mid)change(root &lt;&lt; <span class="number">1</span>,l,mid,x,y);</span><br><span class="line">    <span class="keyword">if</span>(x &gt; mid)change(root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,mid + <span class="number">1</span>,r,x,y);</span><br><span class="line">    update(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>,u,v ; i &lt; n ; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        add(u,v);add(v,u);<span class="comment">//加边</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; ++ i)<span class="built_in">cin</span> &gt;&gt; w[i];</span><br><span class="line">    dfs1(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    dfs2(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> opt;<span class="keyword">int</span> x,y;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; opt &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="keyword">if</span>(opt == <span class="string">"CHANGE"</span>)change(<span class="number">1</span>,<span class="number">1</span>,n,id[x],y);</span><br><span class="line">        <span class="keyword">if</span>(opt == <span class="string">"QMAX"</span>)<span class="built_in">cout</span> &lt;&lt; qmax(x,y) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">if</span>(opt == <span class="string">"QSUM"</span>)<span class="built_in">cout</span> &lt;&lt; qsum(x,y) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;div class=&quot;image&quot; style=&quot;background-image:url(https://ws4.sinaimg.cn/large/0072Vf1pgy1foxlod238zj31hc0u0nj6.jpg)&quot;&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h6 id=&quot;题面&quot;&gt;&lt;a href=&quot;#题面&quot; class=&quot;headerlink&quot; title=&quot;题面&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P2590&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题面&lt;/a&gt;&lt;/h6&gt;&lt;h6 id=&quot;思路：&quot;&gt;&lt;a href=&quot;#思路：&quot; class=&quot;headerlink&quot; title=&quot;思路：&quot;&gt;&lt;/a&gt;思路：&lt;/h6&gt;&lt;p&gt;树链剖分模板题，1操作直接修改，2把线段树维护信息加上区间最大值&lt;br&gt;
    
    </summary>
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="树链剖分" scheme="http://yoursite.com/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>LCT</title>
    <link href="http://yoursite.com/2019/03/02/LCT/"/>
    <id>http://yoursite.com/2019/03/02/LCT/</id>
    <published>2019-03-02T09:20:37.000Z</published>
    <updated>2019-03-06T11:23:03.000Z</updated>
    
    <content type="html"><![CDATA[<div class="image" style="background-image:url(https://ws3.sinaimg.cn/large/0072Vf1pgy1foxk3mu0ztj31hc0u07m5.jpg)"></div><p><a href="https://www.luogu.org/problemnew/show/P3690" target="_blank" rel="noopener">题面</a></p><p>LCT板子</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// luogu-judger-enable-o2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,v[maxn],s[maxn],sum[maxn],fa[maxn],son[maxn][<span class="number">2</span>],tag[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (son[fa[x]][<span class="number">0</span>] == x <span class="keyword">or</span> son[fa[x]][<span class="number">1</span>] == x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sum[x] = sum[son[x][<span class="number">0</span>]] ^ sum[son[x][<span class="number">1</span>]] ^ v[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rev</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    swap(son[x][<span class="number">0</span>],son[x][<span class="number">1</span>]);</span><br><span class="line">    tag[x] ^= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tag[x])&#123;</span><br><span class="line">        <span class="keyword">if</span>(son[x][<span class="number">0</span>])rev(son[x][<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">if</span>(son[x][<span class="number">1</span>])rev(son[x][<span class="number">1</span>]);</span><br><span class="line">        tag[x] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y = fa[x],z = fa[y],dir = son[y][<span class="number">1</span>] == x;<span class="keyword">int</span> opp = son[x][!dir];<span class="comment">//与x处于相反位置的x的儿子</span></span><br><span class="line">    <span class="keyword">if</span>(check(y))son[z][son[z][<span class="number">1</span>] == y] = x;<span class="comment">//把x顶替y的儿子位置</span></span><br><span class="line">    son[x][!dir] = y;<span class="comment">//把x的反儿子置为y</span></span><br><span class="line">    son[y][dir] = opp;<span class="comment">//把x原来的的位置变为它儿子</span></span><br><span class="line">    <span class="keyword">if</span>(opp)fa[opp] = y;</span><br><span class="line">    fa[y] = x;</span><br><span class="line">    fa[x] = z;</span><br><span class="line">    update(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y = x,top = <span class="number">0</span>,z;</span><br><span class="line">    s[++top] = y;</span><br><span class="line">    <span class="keyword">while</span>(check(y))<span class="comment">//因为要先把上面的标记放完。</span></span><br><span class="line">    &#123;</span><br><span class="line">        y = fa[y];</span><br><span class="line">        s[++top] = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(top)push_down(s[top--]);</span><br><span class="line">    <span class="keyword">while</span>(check(x))</span><br><span class="line">    &#123;</span><br><span class="line">        y = fa[x];z = fa[y];<span class="comment">//y是父亲，z是祖父。</span></span><br><span class="line">        <span class="keyword">if</span>(check(y))rotate((son[y][<span class="number">0</span>] == x) ^ (son[z][<span class="number">0</span>] == y) ? x : y);<span class="comment">//如果y还不是根节点，就说明还可以旋</span></span><br><span class="line">        rotate(x);<span class="comment">//无论怎么旋，最后都要旋x。</span></span><br><span class="line">    &#125;</span><br><span class="line">    update(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">//打通路径</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span> ; x ; x = fa[y = x])</span><br><span class="line">        splay(x),son[x][<span class="number">1</span>] = y,update(x);<span class="comment">//先把x在其辅助树的位置变为根，再连虚边所指的父亲节点；</span></span><br><span class="line">        <span class="comment">//此处须注意，因为我们最开始y为0，所以最开始把x旋到它在的辅助树的根时，我们设其右子树为0；</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make_root</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    access(x);splay(x);<span class="comment">//先把x到根的路径打通，再把x在辅助树中splay为根</span></span><br><span class="line">    rev(x);<span class="comment">//把整颗树翻转，即换根改深度。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">road</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    make_root(x);<span class="comment">//把x置为根</span></span><br><span class="line">    access(y);splay(y);<span class="comment">//把y到x的路径打通</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_root</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    access(x);splay(x);<span class="comment">//把x旋到根后，最左边的节点就是根了</span></span><br><span class="line">    <span class="keyword">while</span>(son[x][<span class="number">0</span>])push_down(x),x = son[x][<span class="number">0</span>];<span class="comment">//一路往左。</span></span><br><span class="line">    splay(x);<span class="comment">//再把原根旋回去</span></span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    make_root(x);</span><br><span class="line">    <span class="keyword">if</span>(find_root(y) != x)fa[x] = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    make_root(x);</span><br><span class="line">    <span class="keyword">if</span>(find_root(y) == x <span class="keyword">and</span> fa[y] == x <span class="keyword">and</span> !son[y][<span class="number">0</span>])&#123;</span><br><span class="line">        fa[y] = son[x][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        update(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//freopen("stdP3690.in","r",stdin);</span></span><br><span class="line"><span class="comment">//freopen("stdP3690.out","w",stdout);</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; ++ i)<span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> opt,x,y;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; opt &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="keyword">if</span>(opt == <span class="number">0</span>)&#123;</span><br><span class="line">            road(x,y);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; sum[y] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(opt == <span class="number">1</span>)link(x,y);</span><br><span class="line">        <span class="keyword">if</span>(opt == <span class="number">2</span>)cut(x,y);</span><br><span class="line">        <span class="keyword">if</span>(opt == <span class="number">3</span>)splay(x),v[x] = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;image&quot; style=&quot;background-image:url(https://ws3.sinaimg.cn/large/0072Vf1pgy1foxk3mu0ztj31hc0u07m5.jpg)&quot;&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P3690&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题面&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LCT板子&lt;/p&gt;
    
    </summary>
    
      <category term="模板" scheme="http://yoursite.com/categories/%E6%A8%A1%E6%9D%BF/"/>
    
    
      <category term="LCT" scheme="http://yoursite.com/tags/LCT/"/>
    
  </entry>
  
  <entry>
    <title>食物</title>
    <link href="http://yoursite.com/2019/03/02/%E9%A3%9F%E7%89%A9/"/>
    <id>http://yoursite.com/2019/03/02/食物/</id>
    <published>2019-03-02T05:45:11.000Z</published>
    <updated>2019-03-06T11:20:04.000Z</updated>
    
    <content type="html"><![CDATA[<div class="image" style="background-image:url(https://ws2.sinaimg.cn/large/0072Vf1pgy1foxlnu5w7cj31kw0w0hcd.jpg)"></div><p><a href="http://yloj.free.idcfengye.com/demo/problem.php?id=1020" target="_blank" rel="noopener">评测</a></p><h4 id="2019-01-27"><a href="#2019-01-27" class="headerlink" title="2019.01.27"></a>2019.01.27</h4><h5 id="2-食物"><a href="#2-食物" class="headerlink" title="2.食物"></a>2.食物</h5><h6 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h6><p>辉夜本来是生活在月宫的月之公主。</p><p>辉夜从月都弄了很多吃的回到了幻想乡，有$n$中不同的食物，第$i$中食物的美味度为$t_i$，一份食物的大小为$u_i$，共有$v_i$份。但是麻烦的事情出现了，她有把这些食物运回永和亭，于是辉夜便弄来了$m$种运载工具。第$i$种运载工具可以运输大小总和不超过$x_i$的食物，运输一次的费用是$y_i$，总共可以运输$z_i$次。<br>辉夜打算选取一些食物运回永和亭，他们的美味度之和（每份食物的和，即使他们都是同一种食物）至少是$p$。值得注意的是，一份食物可以被拆成几份分批次运输，达到永和亭后在组装起来。但是如果不把一份食物完整的运过去，是无法得到美味度的。辉夜想知道最少需要花费的运输费用是多少。由于辉夜的预算仅有$50000$，因此如果费用超过这个数或者无法获得$p$的的美味度，输出”TAT”。<br>$1\leq n,m \le200,0\leq p \le 50000,1\leq t_i,u_i,v_i,x_i,y_i,z_i\le100$<br><a id="more"></a></p><h5 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h5><p>第一行一个数$test$，表示有$test$组数据。<br>对于每组数据，第一行有三个数$n,m,p$。</p><p>接下来$n$行，每行三个整数$t,u,v$，描述一种食物。</p><p>最后m行，每行三个整数$x,y,z$，描述一种运载工具。</p><h6 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h6><p>对于每组数据，输出辉夜想知道的答案。注意存在误解的情况。</p><h6 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h6><p>4</p><p>1 1 7</p><p>14 2 1</p><p>1 2 2</p><p>1 1 10</p><p>10 10 1</p><p>5 7 2</p><p>5 3 34</p><p>1 4 1</p><p>9 4 2</p><p>5 3 3</p><p>1 3 3</p><p>5 3 2</p><p>3 4 5</p><p>6 7 5</p><p>5 3 8</p><p>1 1 1</p><p>1 2 1</p><p>1 1 1</p><h6 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h6><p>4</p><p>14</p><p>12</p><p>TAT</p><h6 id="数据规模与约定"><a href="#数据规模与约定" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h6><p>test不会太大。</p><p>对于前20%的数据，$n,m\leq20$。</p><p>对于前50%的数据，$n,m\leq30,t_i,u_i,v_i,x_i,y_i,z_i\leq10$。</p><h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><p>双重的多重背包，第一次我们把运输量作为背包容量，美味度为收益。求出运输$p$的美味度所需的最小运输量，第二次我们把钱作为背包容量，运输量作为收益。求出运输最小运输量的最小费用。</p><h5 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxnn = <span class="number">6e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,p,dp1[maxnn],need,dp2[maxn],tot1,tot2;</span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">food</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> t,u;</span><br><span class="line">&#125;f[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tool</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">&#125;t[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//freopen("B.in","r",stdin);</span></span><br><span class="line"><span class="comment">//freopen("B.out","w",stdout);</span></span><br><span class="line">ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line">need = <span class="number">1e9</span> + <span class="number">10</span>;<span class="built_in">memset</span>(dp1,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp1));<span class="built_in">memset</span>(dp2,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp2));</span><br><span class="line">tot1 = <span class="number">0</span>;tot2 = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; p;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; ++ i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> t,u,v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t &gt;&gt; u &gt;&gt; v;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(v &gt;= k)</span><br><span class="line">&#123;</span><br><span class="line">f[++tot1].u = u * k;</span><br><span class="line">f[tot1].t = t * k;</span><br><span class="line">v -= k;</span><br><span class="line">k &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">f[++tot1].u = v * u;f[tot1].t = t * v;<span class="comment">//二进制拆分</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= tot1 ; ++ i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">50000</span> ; j &gt;= f[i].u ; -- j)<span class="comment">//f[i].u * f[i].v ; -- j)</span></span><br><span class="line">&#123;</span><br><span class="line">dp1[j] = max(dp1[j],dp1[j - f[i].u] + f[i].t);<span class="comment">//求出用j的运输量可以运输的最大美味度</span></span><br><span class="line"><span class="keyword">if</span>(dp1[j] &gt;= p)need = min(need,j);<span class="comment">//如果当前的美味度比需要的大了，就将当前的运输量与最小运输量比较</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout &lt;&lt; need &lt;&lt; endl;我们就求出了最小运输量了。</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= m ; ++ i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">1</span>,x,y,z;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line"><span class="keyword">while</span>(z &gt;= k)</span><br><span class="line">&#123;</span><br><span class="line">t[++tot2].x = x * k;</span><br><span class="line">t[tot2].y = y * k;</span><br><span class="line">z -= k;</span><br><span class="line">k &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">t[++tot2].x = x * z;t[tot2].y = y * z;<span class="comment">//二进制拆分</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*if(need == 1e9 + 10)&#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; "TAT" &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">continue;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">50000</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= tot2 ; ++ i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">50000</span> ; j &gt;= t[i].y ; -- j)</span><br><span class="line">&#123;</span><br><span class="line">dp2[j] = max(dp2[j],dp2[j - t[i].y] + t[i].x);<span class="comment">//求出用j的费用可以运输的最大量</span></span><br><span class="line"><span class="keyword">if</span>(dp2[j] &gt;= need)ans = min(ans,j);<span class="comment">//如果当前的运输量比至少运输量大，就将当前的费用与最小费用比较。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans == <span class="number">50000</span>)<span class="built_in">cout</span> &lt;&lt; <span class="string">"TAT"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;image&quot; style=&quot;background-image:url(https://ws2.sinaimg.cn/large/0072Vf1pgy1foxlnu5w7cj31kw0w0hcd.jpg)&quot;&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://yloj.free.idcfengye.com/demo/problem.php?id=1020&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;评测&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;2019-01-27&quot;&gt;&lt;a href=&quot;#2019-01-27&quot; class=&quot;headerlink&quot; title=&quot;2019.01.27&quot;&gt;&lt;/a&gt;2019.01.27&lt;/h4&gt;&lt;h5 id=&quot;2-食物&quot;&gt;&lt;a href=&quot;#2-食物&quot; class=&quot;headerlink&quot; title=&quot;2.食物&quot;&gt;&lt;/a&gt;2.食物&lt;/h5&gt;&lt;h6 id=&quot;问题描述：&quot;&gt;&lt;a href=&quot;#问题描述：&quot; class=&quot;headerlink&quot; title=&quot;问题描述：&quot;&gt;&lt;/a&gt;问题描述：&lt;/h6&gt;&lt;p&gt;辉夜本来是生活在月宫的月之公主。&lt;/p&gt;
&lt;p&gt;辉夜从月都弄了很多吃的回到了幻想乡，有$n$中不同的食物，第$i$中食物的美味度为$t_i$，一份食物的大小为$u_i$，共有$v_i$份。但是麻烦的事情出现了，她有把这些食物运回永和亭，于是辉夜便弄来了$m$种运载工具。第$i$种运载工具可以运输大小总和不超过$x_i$的食物，运输一次的费用是$y_i$，总共可以运输$z_i$次。&lt;br&gt;辉夜打算选取一些食物运回永和亭，他们的美味度之和（每份食物的和，即使他们都是同一种食物）至少是$p$。值得注意的是，一份食物可以被拆成几份分批次运输，达到永和亭后在组装起来。但是如果不把一份食物完整的运过去，是无法得到美味度的。辉夜想知道最少需要花费的运输费用是多少。由于辉夜的预算仅有$50000$，因此如果费用超过这个数或者无法获得$p$的的美味度，输出”TAT”。&lt;br&gt;$1\leq n,m \le200,0\leq p \le 50000,1\leq t_i,u_i,v_i,x_i,y_i,z_i\le100$&lt;br&gt;
    
    </summary>
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="动态规划,动规,dp" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E5%8A%A8%E8%A7%84-dp/"/>
    
      <category term="背包" scheme="http://yoursite.com/tags/%E8%83%8C%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>旅游</title>
    <link href="http://yoursite.com/2019/03/02/%E6%97%85%E6%B8%B8/"/>
    <id>http://yoursite.com/2019/03/02/旅游/</id>
    <published>2019-03-02T03:52:37.000Z</published>
    <updated>2019-03-06T11:26:01.000Z</updated>
    
    <content type="html"><![CDATA[<div class="image" style="background-image:url(https://ws4.sinaimg.cn/large/0072Vf1pgy1foxkcofxunj31hc0u0tux.jpg)"></div><p><a href="http://yloj.free.idcfengye.com/demo/problem.php?id=1019" target="_blank" rel="noopener">评测</a></p><h4 id="2019-01-27"><a href="#2019-01-27" class="headerlink" title="2019.01.27"></a>2019.01.27</h4><h5 id="1-旅游"><a href="#1-旅游" class="headerlink" title="1.旅游"></a>1.旅游</h5><h6 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h6><p>辉夜本来是生活在月宫的月之公主。</p><p>辉夜很想出去走走，就算不去那些引人入胜的景点也没有什么关系，只是看着路边变化不断的风景，辉夜就很开心了。但是辉夜讨厌太拥挤的地方，她会拒绝一些人气旺盛的道路。幻想乡有n个景点（从1开始标号），有m条双向的道路连在景点之间，每条道路有一个人气值d，表示这条道路的拥挤程度。辉夜不会经过那些人气值大于 x的道路，她想知道有多少对景点(a，b)满足她能够从景点a到达景点b。</p><a id="more"></a><h6 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h6><p>第一行一个数test，表示有test组数据。<br>对于每组数据，第一行有三个数n,m,q,q表示有q个询问。<br>接下来m行，每行三个数x,y,d，表示有一条连接x,y人气值为d的道路。<br>最后q行，每行一个询问x。</p><h6 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h6><p>对于每组数据，你需要输出q行，依次回答所有询问。</p><h6 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h6><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">6334</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">15724</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">5705</span></span><br><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">12382</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">21726</span></span><br><span class="line"><span class="number">6000</span></span><br><span class="line"><span class="number">10000</span></span><br><span class="line"><span class="number">13000</span></span><br></pre></td></tr></table></figure><h6 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h6><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><h6 id="数据规模于约定"><a href="#数据规模于约定" class="headerlink" title="数据规模于约定"></a>数据规模于约定</h6><p>test不会太大。<br>对于前10%的数据，n&lt;=200。<br>对于前40%的数据，n&lt;=500，m&lt;=2000，q&lt;=100，d&lt;=1000。<br>对于前100%的数据，q&lt;=5000。</p><h6 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h6><p>考虑暴力做法，我们可以在每次询问时暴力模拟，期望得分$40pts$。</p><p>其实仔细想想我们暴力模拟时，无非就是一个找联通块的过程。等等，联通块，你想到了什么。<del>并查集</del>，但是在实际应用中并查集并没有优化，我们在仔细思考，有什么并查集比暴力更优秀的地方，于是我们想到了离线做法，先将边按边权排序，再将询问排序每次加边时考虑一下对联通块的贡献，就可已在$O((m + q)logq)$并查集可以用路径压缩，这样就可以忽略前面的常数了。</p><h6 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span> , flag = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)) &#123; <span class="keyword">if</span>(ch == <span class="string">'-'</span>) flag = <span class="number">-1</span>; ch = getchar(); &#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) &#123; res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>; ch = getchar(); &#125;</span><br><span class="line"><span class="keyword">return</span> res * flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">1e6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Q=<span class="number">5e6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> D=<span class="number">1e6</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,q,fa[N+<span class="number">5</span>],size[N+<span class="number">5</span>],answer[Q+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> begin;</span><br><span class="line"><span class="keyword">int</span> end;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">&#125;edge[M+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">int</span> limit;</span><br><span class="line">&#125;query[Q+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">comp_edge</span><span class="params">(Edge x,Edge y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x.val &lt; y.val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">comp_query</span><span class="params">(Query x,Query y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x.limit &lt; y.limit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(fa[x] == x) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> fa[x] = find(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//freopen("A.in","r",stdin);</span></span><br><span class="line"><span class="comment">//freopen("A.out","w",stdout);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> test = read();</span><br><span class="line"><span class="keyword">while</span>(test -- ) &#123;</span><br><span class="line"></span><br><span class="line">n = read(); m = read(); q = read();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; ++ i) fa[i] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; ++ i) size[i] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= m ; ++ i) &#123;</span><br><span class="line">edge[i].begin = read();</span><br><span class="line">edge[i].end = read();</span><br><span class="line">edge[i].val = read();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= q ; ++ i) query[i].limit = read() , query[i].id = i;</span><br><span class="line">sort(edge+<span class="number">1</span>,edge+<span class="number">1</span>+m,comp_edge);</span><br><span class="line">sort(query+<span class="number">1</span>,query+<span class="number">1</span>+q,comp_query);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">1</span> , ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= q ; ++ i) &#123;</span><br><span class="line"><span class="comment">//此处优化的原理,采用离线做法充分利用答案的单调性</span></span><br><span class="line"><span class="keyword">while</span>(j &lt;= m <span class="keyword">and</span> edge[j].val &lt;= query[i].limit) &#123;</span><br><span class="line"><span class="keyword">int</span> a = edge[j].begin , b = edge[j].end;</span><br><span class="line"><span class="keyword">if</span>(find(a) != find(b)) &#123;</span><br><span class="line">ans -= size[find(a)] * (size[find(a)] - <span class="number">1</span>);</span><br><span class="line">ans -= size[find(b)] * (size[find(b)] - <span class="number">1</span>);</span><br><span class="line">size[find(a)] += size[find(b)];</span><br><span class="line">fa[find(b)] = fa[find(a)];</span><br><span class="line">ans += size[find(a)] * (size[find(a)] - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">answer[query[i].id] = ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= q ; ++ i) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,answer[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;image&quot; style=&quot;background-image:url(https://ws4.sinaimg.cn/large/0072Vf1pgy1foxkcofxunj31hc0u0tux.jpg)&quot;&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://yloj.free.idcfengye.com/demo/problem.php?id=1019&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;评测&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;2019-01-27&quot;&gt;&lt;a href=&quot;#2019-01-27&quot; class=&quot;headerlink&quot; title=&quot;2019.01.27&quot;&gt;&lt;/a&gt;2019.01.27&lt;/h4&gt;&lt;h5 id=&quot;1-旅游&quot;&gt;&lt;a href=&quot;#1-旅游&quot; class=&quot;headerlink&quot; title=&quot;1.旅游&quot;&gt;&lt;/a&gt;1.旅游&lt;/h5&gt;&lt;h6 id=&quot;问题描述：&quot;&gt;&lt;a href=&quot;#问题描述：&quot; class=&quot;headerlink&quot; title=&quot;问题描述：&quot;&gt;&lt;/a&gt;问题描述：&lt;/h6&gt;&lt;p&gt;辉夜本来是生活在月宫的月之公主。&lt;/p&gt;
&lt;p&gt;辉夜很想出去走走，就算不去那些引人入胜的景点也没有什么关系，只是看着路边变化不断的风景，辉夜就很开心了。但是辉夜讨厌太拥挤的地方，她会拒绝一些人气旺盛的道路。幻想乡有n个景点（从1开始标号），有m条双向的道路连在景点之间，每条道路有一个人气值d，表示这条道路的拥挤程度。辉夜不会经过那些人气值大于 x的道路，她想知道有多少对景点(a，b)满足她能够从景点a到达景点b。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="并查集" scheme="http://yoursite.com/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>CDQ分治</title>
    <link href="http://yoursite.com/2019/01/14/CDQ%E5%88%86%E6%B2%BB/"/>
    <id>http://yoursite.com/2019/01/14/CDQ分治/</id>
    <published>2019-01-14T12:42:43.000Z</published>
    <updated>2019-03-06T11:10:01.000Z</updated>
    
    <content type="html"><![CDATA[<div class="image" style="background-image:url(https://ws4.sinaimg.cn/large/0072Vf1pgy1fodqo2pcz9j31kw0zkkjl.jpg)"></div><h4 id="CDQ分治"><a href="#CDQ分治" class="headerlink" title="CDQ分治"></a>CDQ分治</h4><h6 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h6><p>什么是CDQ分治呢。CDQ分治是雅礼的一名IOI金牌选手陈丹琦提出来的一种用分治的思想解决一类与维护决策有关的问题。现多用于求解偏序问题。</p><p>下面是她的原文：分治的基本思想是将一个规模为$N$的问题分解为$K$个规模较小的子问题，这些子问题互相独立且与原问题性质相同。求出子问题的接，就可得到原问题的接。分治算法非常基础，但是却非常重要，本文将从今年<strong>$NOI$</strong>的一道动态规划$Cash$开始谈如何利用分治思想来解决一类与维护决策有关的问题。（具体请看<a href="https://wenku.baidu.com/view/3b913556fd0a79563d1e7245.html?rec_flag=default&amp;sxts=1547466880843" target="_blank" rel="noopener"><strong>陈丹琦论文</strong></a>）<br><a id="more"></a></p><h6 id="主要思想："><a href="#主要思想：" class="headerlink" title="主要思想："></a>主要思想：</h6><p>用sort解决第一维，再用$N-2$层CDQ分治解决中间的$N-2$维，最后一维用树状数组实现。</p><p>你可能看到这还有一点不理解，我们以一下的题目为例，来具体讲解CDQ分治的用途以及如何实现。</p><p>二维偏序：</p><p>数星星</p><p>题面：<a href="https://loj.ac/problem/10114" target="_blank" rel="noopener">loj</a>，<a href="http://poj.org/problem?id=2352" target="_blank" rel="noopener">poj</a></p><p>二维的问题十分简单，因为$y$已经有序了所以我们可以考虑用树状数组来解决这题。我们可以维护一个树状数组按先后顺序依次插入元素，再查询当前的元素前面有多少个数。然后将答案存入一个数组，我们就可以写这题了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,ans[maxn],tree[maxn * <span class="number">10</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line">&#125;a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = x ; i &lt;= maxn * <span class="number">2</span> ; i += (i &amp; (-i)))</span><br><span class="line">tree[i] += y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = x ; i ; i -= (i &amp; (-i)))</span><br><span class="line">res += tree[i];</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; ++ i)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i].x &gt;&gt; a[i].y;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; ++ i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u = a[i].x + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> v = sum(u);</span><br><span class="line">update(u,<span class="number">1</span>);</span><br><span class="line">ans[v] ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; ++ i)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再看一题：</p><p><a href="https://www.luogu.org/problemnew/show/U47402" target="_blank" rel="noopener">二维偏序模板题</a></p><p>这是一道简单的二维偏序题，我们仍然可以用树状数组简单的A掉这一题，注意的是我们在查询时因为$i_x &lt;= j_x,i_y &lt;= i_y$所以我们查询时我们需将查询的值加一在查询。但我们的目标不是用树状数组解决它，我们要用CDQ分治解决它。</p><p>就和基本解题思路一样，我们可以考虑先按照关键字$x$排序，然后因为$x$已经有序，所以我们只需要处理出满足$i_y &lt;= j_y(i &lt; j)$的顺序对个数就可以了(我们机房某神犇告诉我其实也可以用总共的对数也就是$n * (n - 1) / 2$减去逆序对个数来求解)</p><p>具体的代码：</p><p>顺序对：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long<span class="comment">//注意一定要开long long不然只有30分</span></span></span><br><span class="line"><span class="keyword">int</span> n,cnt,t[maxn &lt;&lt; <span class="number">1</span>],ans;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;<span class="keyword">int</span> y;</span><br><span class="line">&#125;a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node q,node p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(q.x != p.x)<span class="keyword">return</span> q.x &lt; p.x;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> q.y &lt; p.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergesort</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    mergesort(l,mid);mergesort(mid + <span class="number">1</span>,r);</span><br><span class="line">    <span class="keyword">int</span> p = l,q = mid + <span class="number">1</span>,cnt = l;</span><br><span class="line"><span class="comment">/*cout &lt;&lt; "[" &lt;&lt; l &lt;&lt; "," &lt;&lt; r &lt;&lt; "]" &lt;&lt; ": "&lt;&lt; endl;</span></span><br><span class="line"><span class="comment">    for(int i = l ; i &lt;= r ; ++ i)</span></span><br><span class="line"><span class="comment">        cout &lt;&lt; a[i].y &lt;&lt; " ";</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; endl &lt;&lt; "ans: " &lt;&lt; endl;*/</span></span><br><span class="line">    <span class="keyword">while</span>(p &lt;= mid <span class="keyword">and</span> q &lt;= r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[p].y &lt;= a[q].y)t[cnt++] = a[p++].y,ans += r - q + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> t[cnt++] = a[q++].y;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//cout &lt;&lt; ans &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">while</span>(p &lt;= mid)t[cnt++] = a[p++].y;</span><br><span class="line">    <span class="keyword">while</span>(q &lt;= r)t[cnt++] = a[q++].y;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l ; i &lt;= r ; ++ i)a[i].y = t[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span><span class="comment">//相当与int main()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; ++ i)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i].x &gt;&gt; a[i].y;</span><br><span class="line">    sort(a + <span class="number">1</span>,a + n + <span class="number">1</span>,cmp);</span><br><span class="line"><span class="comment">/*for(int i = 1 ; i &lt;= n ; ++ i)</span></span><br><span class="line"><span class="comment">        cout &lt;&lt; a[i].y &lt;&lt; " ";</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; endl;*/</span></span><br><span class="line">    mergesort(<span class="number">1</span>,n);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总对数-逆序对</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">int</span> n,cnt,t[maxn &lt;&lt; <span class="number">1</span>],ans;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;<span class="keyword">int</span> y;</span><br><span class="line">&#125;a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node q,node p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(q.x != p.x)<span class="keyword">return</span> q.x &lt; p.x;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> q.y &lt; p.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergesort</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    mergesort(l,mid);mergesort(mid + <span class="number">1</span>,r);</span><br><span class="line">    <span class="keyword">int</span> p = l,q = mid + <span class="number">1</span>,cnt = l;</span><br><span class="line">    <span class="keyword">while</span>(p &lt;= mid <span class="keyword">and</span> q &lt;= r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[p].y &lt;= a[q].y)t[cnt++] = a[p++].y;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            t[cnt++] = a[q++].y;</span><br><span class="line">            ans += mid - p + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(p &lt;= mid)t[cnt++] = a[p++].y;</span><br><span class="line">    <span class="keyword">while</span>(q &lt;= r)t[cnt++] = a[q++].y;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l ; i &lt;= r ; ++ i)a[i].y = t[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; ++ i)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i].x &gt;&gt; a[i].y;</span><br><span class="line">    sort(a + <span class="number">1</span>,a + n + <span class="number">1</span>,cmp);</span><br><span class="line">    <span class="comment">/*for(int i = 1 ; i &lt;= n ; ++ i)</span></span><br><span class="line"><span class="comment">        cout &lt;&lt; a[i].y &lt;&lt; " ";</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; endl;*/</span></span><br><span class="line">    mergesort(<span class="number">1</span>,n);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; n * (n - <span class="number">1</span>) / <span class="number">2</span> - ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中顺(逆)序对都是用归并排序实现的。</p><p>写了这么多，终于要步入正题了。</p><h6 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h6><p>由于本人太弱，目前只会三维的CDQ分治求解，高维要用CDQ套CDQ</p><h6 id="三维偏序-陌上花开"><a href="#三维偏序-陌上花开" class="headerlink" title="三维偏序(陌上花开)"></a>三维偏序(陌上花开)</h6><p>沿用二维偏序的代码和基本的解题思想，我们不难得出先sort出一维，再用CDQ分治求解二维，三维交给树状数组。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,k,ans[maxn],tree[maxn * <span class="number">2</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">flower</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;<span class="keyword">int</span> y;<span class="keyword">int</span> z;<span class="keyword">int</span> num;<span class="keyword">int</span> ans;</span><br><span class="line">&#125;a[maxn],b[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(flower &amp;q,flower &amp;p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(q.x != p.x)<span class="keyword">return</span> q.x &lt; p.x;</span><br><span class="line">    <span class="keyword">if</span>(q.y != p.y)<span class="keyword">return</span> q.y &lt; p.y;</span><br><span class="line">    <span class="keyword">return</span> q.z &lt; p.z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">same</span><span class="params">(flower &amp;q,flower &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (q.x == p.x <span class="keyword">and</span> q.y == p.y <span class="keyword">and</span> q.z == p.z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = x ; i &lt;= k ; i += (i &amp; (-i)))tree[i] += y;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = x ; i ; i -= (i &amp; (-i)))res += tree[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cdq</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    cdq(l,mid);cdq(mid + <span class="number">1</span>,r);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l,j = l,p = mid + <span class="number">1</span>;i &lt;= r ; ++ i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j &lt;= mid <span class="keyword">and</span> (p &gt; r <span class="keyword">or</span> a[j].y &lt;= a[p].y))b[i] = a[j++];</span><br><span class="line">        <span class="keyword">else</span> b[i] = a[p++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l ; i &lt;= r ; ++ i)&#123;</span><br><span class="line">        a[i] = b[i];</span><br><span class="line">        <span class="keyword">if</span>(a[i].num &lt;= mid)add(a[i].z,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> a[i].ans += query(a[i].z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l ; i &lt;= r ; ++ i)<span class="keyword">if</span>(a[i].num &lt;= mid)add(a[i].z,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; ++ i)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i].x &gt;&gt; a[i].y &gt;&gt; a[i].z;</span><br><span class="line">    sort(a + <span class="number">1</span>,a + <span class="number">1</span> + n,cmp);</span><br><span class="line">    flower t;<span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n ; i &gt;= <span class="number">1</span> ; -- i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(same(t,a[i]))&#123;</span><br><span class="line">            a[i].ans += cnt;</span><br><span class="line">            ++ cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            t = a[i];</span><br><span class="line">            cnt = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; ++ i)a[i].num = i;</span><br><span class="line">    cdq(<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; ++ i)ans[a[i].ans]++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; ++ i)<span class="built_in">cout</span> &lt;&lt; ans[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>终于写完了，呜呜呜呜~~数学立体几何好难啊，要是CDQ分治能解立体几何就好了。</p><p>同时以此文膜拜一下学姐。</p><p>各位晚安qwq。</p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;image&quot; style=&quot;background-image:url(https://ws4.sinaimg.cn/large/0072Vf1pgy1fodqo2pcz9j31kw0zkkjl.jpg)&quot;&gt;&lt;/div&gt;

&lt;h4 id=&quot;CDQ分治&quot;&gt;&lt;a href=&quot;#CDQ分治&quot; class=&quot;headerlink&quot; title=&quot;CDQ分治&quot;&gt;&lt;/a&gt;CDQ分治&lt;/h4&gt;&lt;h6 id=&quot;定义：&quot;&gt;&lt;a href=&quot;#定义：&quot; class=&quot;headerlink&quot; title=&quot;定义：&quot;&gt;&lt;/a&gt;定义：&lt;/h6&gt;&lt;p&gt;什么是CDQ分治呢。CDQ分治是雅礼的一名IOI金牌选手陈丹琦提出来的一种用分治的思想解决一类与维护决策有关的问题。现多用于求解偏序问题。&lt;/p&gt;
&lt;p&gt;下面是她的原文：分治的基本思想是将一个规模为$N$的问题分解为$K$个规模较小的子问题，这些子问题互相独立且与原问题性质相同。求出子问题的接，就可得到原问题的接。分治算法非常基础，但是却非常重要，本文将从今年&lt;strong&gt;$NOI$&lt;/strong&gt;的一道动态规划$Cash$开始谈如何利用分治思想来解决一类与维护决策有关的问题。（具体请看&lt;a href=&quot;https://wenku.baidu.com/view/3b913556fd0a79563d1e7245.html?rec_flag=default&amp;amp;sxts=1547466880843&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;陈丹琦论文&lt;/strong&gt;&lt;/a&gt;）&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>基环树学习理解</title>
    <link href="http://yoursite.com/2019/01/12/%E5%9F%BA%E7%8E%AF%E6%A0%91%E5%AD%A6%E4%B9%A0%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/01/12/基环树学习理解/</id>
    <published>2019-01-12T02:47:46.000Z</published>
    <updated>2019-03-06T11:39:48.000Z</updated>
    
    <content type="html"><![CDATA[<div class="image" style="background:url(https://ws4.sinaimg.cn/large/006ZFECEgy1fr1x6img9jj31hc0u04qp.jpg)"></div><h4 id="基环树学习理解"><a href="#基环树学习理解" class="headerlink" title="基环树学习理解"></a>基环树学习理解</h4><h6 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h6><p>基环树是一种特殊的图，我们知道树是由$N$个点，$N - 1$条边组成的，那么我们在树上任意两点之间加上一条边都会产生一个环，我们把这种$N$个点，$N$条边组成的联通无向图称为基环树。<a id="more"></a>如果不保证联通，也可能是基环树森林，注意基环树森林中每个点都必须有一条边连接起来。如果存在独立的点的话，那么很可能其中的一个联通子图中存在两个环，而基环树去要求有且只有一个环。</p><h6 id="一般的题型"><a href="#一般的题型" class="headerlink" title="一般的题型"></a>一般的题型</h6><p>基环树的直径(树上两点之间的距离中的最大值)，基环树上的动态规划，基环树两点之间的距离。</p><h6 id="一般解题思路"><a href="#一般解题思路" class="headerlink" title="一般解题思路"></a>一般解题思路</h6><p>基环树的最大特征就是有且只有一个环。所以我们解题(接下来以求基环树的直径为例)时，一般从环入手，先找到环。其中找环过程可以用$BFS$的拓扑排序或$DFS$遍历。然后我们可以考虑从环上每个节点出发，在不经过环上其他点的情况下处理出这棵子树的最长链以及叶子节点到根节点的最长距离。然后我们知道基环树的直径只可能有两种情况：</p><ul><li>1.树上最长链出现在子树中</li><li>2.环上两棵子树中的叶子节点到另一棵子树的叶子节点经过环</li></ul><p>所以我们只需在环上在进行一遍$dp$把环上的边考虑进来就可以了。</p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;image&quot; style=&quot;background:url(https://ws4.sinaimg.cn/large/006ZFECEgy1fr1x6img9jj31hc0u04qp.jpg)&quot;&gt;&lt;/div&gt;

&lt;h4 id=&quot;基环树学习理解&quot;&gt;&lt;a href=&quot;#基环树学习理解&quot; class=&quot;headerlink&quot; title=&quot;基环树学习理解&quot;&gt;&lt;/a&gt;基环树学习理解&lt;/h4&gt;&lt;h6 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h6&gt;&lt;p&gt;基环树是一种特殊的图，我们知道树是由$N$个点，$N - 1$条边组成的，那么我们在树上任意两点之间加上一条边都会产生一个环，我们把这种$N$个点，$N$条边组成的联通无向图称为基环树。
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="基环树" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%8E%AF%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>线性方程组</title>
    <link href="http://yoursite.com/2018/12/22/%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E7%BB%84/"/>
    <id>http://yoursite.com/2018/12/22/线性方程组/</id>
    <published>2018-12-22T07:52:03.000Z</published>
    <updated>2019-03-06T11:49:12.000Z</updated>
    
    <content type="html"><![CDATA[<div class="image" style="background:url(https://ws3.sinaimg.cn/large/0072Vf1pgy1foxkihz4b4j31hc0u0wux.jpg)"></div><h5 id="题面："><a href="#题面：" class="headerlink" title="题面："></a><a href="https://www.luogu.org/problemnew/show/P2455" target="_blank" rel="noopener">题面：</a></h5><p>模板高斯消元加强版。</p><p>给你$n$个方程其中含有$n$个未知数，判段方程是否有唯一解。若方程有无数个解，输出$0$，若方程无解，输出$-1$，若方程有唯一解，输出该解。</p><a id="more"></a><p>输入格式：</p><p>第一行：未知数的个数。以下$n$行$n+1$列：分别表示每一格方程的系数及方程右边的值。</p><p>输出格式：</p><p>如果方程组无实数解输出$-1$；</p><p>如果有无穷多实数解，输出$0$；</p><p>如果有唯一解，则输出解（小数点后保留两位小数）。</p><h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><p>输入样例#1：                        输出样例#1：</p><p>3                                    x1=1.00<br>2 -1 1 1                            x2=0<br>4 1 -1 5                            x3=-1.00<br>1 1 1 0</p><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>这题和高斯消元模板题一样，只是多了一个判定方程是无穷解还是无解。</p><p>无解情况是高斯消元完后方程左边的系数全为0，但方程右边不为0。</p><p>无穷解的情况是：高斯消元完后存在某一行或多行全为0。</p><p>唯一解就是不满足上述的情况。</p><p>但这题一个比较麻烦的小细节是：</p><p>在<a href="https://www.luogu.org/problemnew/show/P3389" target="_blank" rel="noopener">洛谷P3389</a>中的高斯消元我们是在消元的过程中发现当前行的当前要消的列的系数为0就返回false。很遗憾在这一题行不通。<del>(什么？你问我为什么，请看一下<a href="https://www.luogu.org/discuss/show/82190?page=2" target="_blank" rel="noopener">hack数据</a>)</del></p><h6 id="Input-hack"><a href="#Input-hack" class="headerlink" title="Input(hack)"></a>Input(hack)</h6><p>3<br>0 0 1 2<br>0 0 1 1<br>0 0 0 0</p><h6 id="Output-hack"><a href="#Output-hack" class="headerlink" title="Output(hack)"></a>Output(hack)</h6><p>-1</p><p><del>再发一组<a href="">hack数据</a>吧。</del></p><h6 id="Input"><a href="#Input" class="headerlink" title="Input:"></a>Input:</h6><p>3<br>4 2 3 1<br>4 1 2 3<br>5 2 3 3</p><h6 id="Output"><a href="#Output" class="headerlink" title="Output:"></a>Output:</h6><p>x1=2.00<br>x2=1.00<br>x3=-3.00</p><p>注：因为本题数据太水，你可能也过了，但我们追求的是正确的解法和能力的提高不是吗？</p><p>同时这一题貌似还卡精度。</p><p>所以我们可以这样处理：</p><p>遇到当前要消去的列(最大绝对值)的系数为0，就跳过，直到找到一个不为零的项为止。</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">55</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">double</span> a[maxn][maxn],del;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; ++ i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;= n + <span class="number">1</span>; ++ j)</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i][j];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ,c = <span class="number">1</span>; i &lt;= n ; ++ i)<span class="comment">//枚举列，c为行</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> k = c;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = c + <span class="number">1</span> ; j &lt;= n ; ++ j)<span class="keyword">if</span>(<span class="built_in">fabs</span>(a[j][i]) &gt; <span class="built_in">fabs</span>(a[k][i]))k = j;<span class="comment">//枚举列（交换用）</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">fabs</span>(del = a[k][i]) &lt; eps)<span class="keyword">continue</span>;</span><br><span class="line"><span class="comment">//如果当前列为0，说明后面的所有都为0，接着枚举该行</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//many = 1;</span></span><br><span class="line"><span class="comment">//continue;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i ; j &lt;= n + <span class="number">1</span> ; ++ j)swap(a[c][j],a[k][j]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i ; j &lt;= n + <span class="number">1</span> ; ++ j)a[c][j] /= del;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span> ; k &lt;= n ; ++ k)</span><br><span class="line">            <span class="keyword">if</span>(k != c)&#123;</span><br><span class="line">                del = a[k][i];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = i ; j &lt;= n + <span class="number">1</span> ; ++ j)a[k][j] -= a[c][j] * del;</span><br><span class="line">            &#125;</span><br><span class="line">        ++ c;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*for(int i = 1 ; i &lt;= n ; ++ i)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        for(int j = 1 ; j &lt;= n + 1; ++ j)</span></span><br><span class="line"><span class="comment">            cout &lt;&lt; a[i][j] &lt;&lt; " ";</span></span><br><span class="line"><span class="comment">        cout &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="keyword">bool</span> many = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">bool</span> noanw = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;= n ; ++ j)</span><br><span class="line">            <span class="keyword">if</span>(a[i][j])noanw = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(!noanw <span class="keyword">and</span> a[i][n + <span class="number">1</span>])&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!noanw <span class="keyword">and</span> !a[i][n + <span class="number">1</span>])</span><br><span class="line">            many = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(many)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; ++ i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"x%d=%.2lf\n"</span>,i,a[i][n + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;image&quot; style=&quot;background:url(https://ws3.sinaimg.cn/large/0072Vf1pgy1foxkihz4b4j31hc0u0wux.jpg)&quot;&gt;&lt;/div&gt;

&lt;h5 id=&quot;题面：&quot;&gt;&lt;a href=&quot;#题面：&quot; class=&quot;headerlink&quot; title=&quot;题面：&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P2455&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题面：&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;模板高斯消元加强版。&lt;/p&gt;
&lt;p&gt;给你$n$个方程其中含有$n$个未知数，判段方程是否有唯一解。若方程有无数个解，输出$0$，若方程无解，输出$-1$，若方程有唯一解，输出该解。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="高斯消元" scheme="http://yoursite.com/tags/%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83/"/>
    
  </entry>
  
  <entry>
    <title>球形空间产生器</title>
    <link href="http://yoursite.com/2018/12/22/%E7%90%83%E5%BD%A2%E7%A9%BA%E9%97%B4%E4%BA%A7%E7%94%9F%E5%99%A8/"/>
    <id>http://yoursite.com/2018/12/22/球形空间产生器/</id>
    <published>2018-12-22T05:58:21.000Z</published>
    <updated>2019-03-06T11:31:38.000Z</updated>
    
    <content type="html"><![CDATA[<div class="image" style="background:url(https://ws4.sinaimg.cn/large/0072Vf1pgy1foxlo3qh6yj31kw0w01h2.jpg)"></div><p><a href="https://www.luogu.org/problemnew/show/P4035" target="_blank" rel="noopener">题面</a></p><p>有一个球形空间产生器能够在 $n$ 维空间中产生一个坚硬的球体。现在，你被困在了这个 $n$ 维球体中，你只知道球面上 $n+1$ 个点的坐标，你需要以最快的速度确定这个 $n$ 维球体的球心坐标，以便于摧毁这个球形空间产生器。</p><p>数据范围：</p><p>$1&lt;=N&lt;=10$</p><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>首先球心到达每个点的距离是相等的，我们可以依据这个来列方程，然后用高斯消元求解。</p><a id="more"></a><h5 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h5><p>以二维为例：</p><p>设中心坐标为$(x_0,y_0)$半径为$r$,则可以列出方程：</p><p>$(x_1 - x_0)^2 + (y_1 - y_0)^2 = r^2$  ①</p><p>$(x_2 - x_0)^2 + (y_2 - y_0)^2 = r^2$  ②</p><p>①$-$②得：</p><p>$(x_1 - x_0)^2 + (y_1 - y_0)^2 - (x_2 - x_0)^2 - (y_2 - y_0)^2 = 0$</p><p>化简得：</p><p>$(x_1 + x_2 - 2x_0)(x_1 - x_2) + (y_1 + y_2 - 2y_0)(y_1 - y_2) = 0$</p><p>$x_1^2 - x_2^2 + y_1^2 - y_2^2 - 2(x_1 - x_2)x_0 - 2(y_1 - y_2)y_0 = 0$</p><p>其中$x_1,x_2,y_1,y_2$是已知的。我们可以将后两项移项，得到高斯消元的基本式。</p><p>然后我们就可以愉快地上模板了。</p><h5 id="代码"><a href="#代码" class="headerlink" title="[代码]"></a>[代码]</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">double</span> a[maxn][maxn],Matrix[maxn][maxn],del;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">guass</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> k = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span> ; j &lt;= n ; ++ j)<span class="keyword">if</span>(<span class="built_in">fabs</span>(Matrix[j][i] &gt; <span class="built_in">fabs</span>(Matrix[k][i])))k = j;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">fabs</span>(del = Matrix[k][i]) &lt; eps)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//swap(Matrix[i], Matrix[k]);</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i ; j &lt;= n + <span class="number">1</span> ; ++ j)swap(Matrix[i][j],Matrix[k][j]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i ; j &lt;= n + <span class="number">1</span> ; ++ j)Matrix[i][j] /= del;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span> ; k &lt;= n ; ++ k)</span><br><span class="line">            <span class="keyword">if</span>(k != i)&#123;</span><br><span class="line">                del = Matrix[k][i];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = i ; j &lt;= n + <span class="number">1</span> ; ++ j)Matrix[k][j] -= del * Matrix[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//ios::sync_with_stdio(0);</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n + <span class="number">1</span> ; ++ i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;= n ; ++ j)</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i][j];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span> ; k &lt;= n ; ++ k)</span><br><span class="line">        &#123;</span><br><span class="line">            Matrix[i][k] = <span class="number">2</span> * (a[i][k] - a[i + <span class="number">1</span>][k]);</span><br><span class="line">            Matrix[i][n + <span class="number">1</span>] += (a[i][k] * a[i][k] - a[i + <span class="number">1</span>][k] * a[i + <span class="number">1</span>][k]);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//Matrix[i][n + 1] = res;</span></span><br><span class="line">    &#125;</span><br><span class="line">    guass();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; ++ i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.3lf "</span>,Matrix[i][n + <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;image&quot; style=&quot;background:url(https://ws4.sinaimg.cn/large/0072Vf1pgy1foxlo3qh6yj31kw0w01h2.jpg)&quot;&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P4035&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题面&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;有一个球形空间产生器能够在 $n$ 维空间中产生一个坚硬的球体。现在，你被困在了这个 $n$ 维球体中，你只知道球面上 $n+1$ 个点的坐标，你需要以最快的速度确定这个 $n$ 维球体的球心坐标，以便于摧毁这个球形空间产生器。&lt;/p&gt;
&lt;p&gt;数据范围：&lt;/p&gt;
&lt;p&gt;$1&amp;lt;=N&amp;lt;=10$&lt;/p&gt;
&lt;h5 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h5&gt;&lt;p&gt;首先球心到达每个点的距离是相等的，我们可以依据这个来列方程，然后用高斯消元求解。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="高斯消元" scheme="http://yoursite.com/tags/%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83/"/>
    
  </entry>
  
  <entry>
    <title>[洛谷]榨取kkksc03</title>
    <link href="http://yoursite.com/2018/12/18/%E6%B4%9B%E8%B0%B7-%E6%A6%A8%E5%8F%96kkksc03/"/>
    <id>http://yoursite.com/2018/12/18/洛谷-榨取kkksc03/</id>
    <published>2018-12-18T04:31:15.000Z</published>
    <updated>2019-03-07T07:59:31.000Z</updated>
    
    <content type="html"><![CDATA[<div class="image" style="background:url(https://ws3.sinaimg.cn/large/0072Vf1pgy1fodqgiodg1j31gs1191im.jpg)"></div><h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p>给你一定的时间和背包容量，现在有$n$个物品，选择它们，需要一定的时间还需耗费你的一定背包容量。求最多能选几个物品。</p><h3 id="先分析一下思路："><a href="#先分析一下思路：" class="headerlink" title="先分析一下思路："></a>先分析一下思路：</h3><p>如果只有一件费用，那么就可以直接上贪心了。将费用$sort$一遍，然后就直接一样一样的选。<br><a id="more"></a><br>可是现在是二维的费用了，也就是说它有两项费用需均衡同时考虑。这就是一道明显的二维费用的背包问题了。</p><p>首先我们枚举物品用一层循环枚举容量，然后再用一层循环枚举时间；我们就考虑一下，我们是选当前这件物品，还是不选。如果选我们还剩多少的背包容量和时间，然后它的总收益就是剩下的能选的最大数$+1$，在和当前已知的用同样的时间和背包容量能选的最大值比较，取最大值，就可以了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,t,m1[<span class="number">105</span>],t1[<span class="number">105</span>],f[<span class="number">205</span>][<span class="number">205</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;m1[i]&gt;&gt;t1[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = m; j &gt;= m1[i]; -- j)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = t; k &gt;= t1[i]; -- k)</span><br><span class="line">    f[j][k] = max(f[j][k],f[j - m1[i]][k - t1[i]]+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;f[m][t];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>附加：如果你实在不会打动态规划，那么你也可以用记忆化搜索，<a href="https://interestinglsy.blog.luogu.org/memdfs-and-dp" target="_blank" rel="noopener">这两种方法本质都是一样的</a>)</p><p>不过建议你还是学习一下动态规划吧，毕竟动规只是思路比较难，但动规实现还是很好的。</p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;image&quot; style=&quot;background:url(https://ws3.sinaimg.cn/large/0072Vf1pgy1fodqgiodg1j31gs1191im.jpg)&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;题面&quot;&gt;&lt;a href=&quot;#题面&quot; class=&quot;headerlink&quot; title=&quot;题面&quot;&gt;&lt;/a&gt;题面&lt;/h3&gt;&lt;p&gt;给你一定的时间和背包容量，现在有$n$个物品，选择它们，需要一定的时间还需耗费你的一定背包容量。求最多能选几个物品。&lt;/p&gt;
&lt;h3 id=&quot;先分析一下思路：&quot;&gt;&lt;a href=&quot;#先分析一下思路：&quot; class=&quot;headerlink&quot; title=&quot;先分析一下思路：&quot;&gt;&lt;/a&gt;先分析一下思路：&lt;/h3&gt;&lt;p&gt;如果只有一件费用，那么就可以直接上贪心了。将费用$sort$一遍，然后就直接一样一样的选。&lt;br&gt;
    
    </summary>
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="动态规划,动规,dp" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E5%8A%A8%E8%A7%84-dp/"/>
    
  </entry>
  
  <entry>
    <title>[模板]treap</title>
    <link href="http://yoursite.com/2018/12/17/%E6%A8%A1%E6%9D%BF-treap/"/>
    <id>http://yoursite.com/2018/12/17/模板-treap/</id>
    <published>2018-12-17T04:26:29.000Z</published>
    <updated>2019-03-06T11:08:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><div class="image" style="background-image:url(https://ws2.sinaimg.cn/large/0072Vf1pgy1fodqiemqvoj31hc0xcaxb.jpg)"></div><br>treap模板<br><a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e7</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,tot,root;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">treap</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,val,dat;<span class="comment">//左子树编号，右子树编号，节点关键码，权值；</span></span><br><span class="line">    <span class="keyword">int</span> size,cnt;<span class="comment">//子树大小，副本个数（均包括自己）；</span></span><br><span class="line">&#125;a[maxn];</span><br><span class="line"><span class="comment">//增加新节点</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">New</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a[++tot].val = val;</span><br><span class="line">    a[tot].dat = rand();<span class="comment">//随机分配一个权值</span></span><br><span class="line">    a[tot].cnt = a[tot].size = <span class="number">1</span>;<span class="comment">//副本和子树大小为1；</span></span><br><span class="line">    <span class="keyword">return</span> tot;<span class="comment">//返回当前节点的编号；</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重新计算子树大小；</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    a[p].size = a[a[p].l].size + a[a[p].r].size + a[p].cnt;</span><br><span class="line">    <span class="comment">//子树大小等于左右子树大小加副本数；</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//建树：</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    New(-INF),New(INF);<span class="comment">//插入正无穷和负无穷</span></span><br><span class="line">    root = <span class="number">1</span>,a[<span class="number">1</span>].r = <span class="number">2</span>;<span class="comment">//根据BST的基础定义,左小,右大，根中间；</span></span><br><span class="line">    Update(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查询x数的排名</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetRankByVal</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//如果没有了就返回0；</span></span><br><span class="line">    <span class="keyword">if</span>(val == a[p].val)<span class="keyword">return</span> a[a[p].l].size;</span><br><span class="line">    <span class="comment">//如果查到了，就返回其左子树的大小</span></span><br><span class="line">    <span class="keyword">if</span>(val &lt; a[p].val)<span class="keyword">return</span> GetRankByVal(a[p].l,val);</span><br><span class="line">    <span class="keyword">return</span> GetRankByVal(a[p].r,val) + a[a[p].l].size + a[p].cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetValByRank</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> rank)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="number">0</span>)<span class="keyword">return</span> INF;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; rank &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//cout &lt;&lt; a[p].val &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//cout &lt;&lt; p &lt;&lt; ": " &lt;&lt; a[p].size &lt;&lt; " l :"&lt;&lt; a[a[p].l].size &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">if</span>(a[a[p].l].size &gt;= rank)<span class="keyword">return</span> GetValByRank(a[p].l,rank);</span><br><span class="line">    <span class="keyword">if</span>(a[a[p].l].size + a[p].cnt &gt;= rank)<span class="keyword">return</span> a[p].val;</span><br><span class="line">    <span class="keyword">return</span> GetValByRank(a[p].r,rank - a[a[p].l].size - a[p].cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//右旋（压缩包？？）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zip</span><span class="params">(<span class="keyword">int</span> &amp;p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q = a[p].l;<span class="comment">//将当前节点的左节点记录下来；</span></span><br><span class="line">    a[p].l = a[q].r,a[q].r = p,p = q;</span><br><span class="line"><span class="comment">//当前节点的左节点变为其原左节点的右节点，因为左子树的任何一棵子树都是比当前节点小的；当前节点的右节点不变；</span></span><br><span class="line"><span class="comment">//原左节点的左子树不变，右子树变为当前节点，即它原先的父节点；</span></span><br><span class="line"><span class="comment">//在将当前的节点变为原左节点，因为p是个引用，so调用的p会变为q，因为此时q为父节点了；</span></span><br><span class="line">    Update(a[p].r),Update(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//左旋</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zap</span><span class="params">(<span class="keyword">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q = a[p].r;<span class="comment">//将当前节点的右节点记录下来；</span></span><br><span class="line">    a[p].r = a[q].l , a[q].l = p , p = q;</span><br><span class="line"><span class="comment">//当前节点的右节点比当前节点及其左子树大，所以将当前节点变为其原节点的左子树，同时将原右节点的左子树变为当前节点的左子树</span></span><br><span class="line">    Update(a[p].l),Update(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> &amp;p,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="comment">//如果没有该节点；</span></span><br><span class="line">    <span class="keyword">if</span>(p == <span class="number">0</span>)&#123;</span><br><span class="line">        p = New(val);<span class="comment">//注意p是引用！！！这很重要，p会涉及旋转，所以请读者好好理解；</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果有该节点；</span></span><br><span class="line">    <span class="keyword">if</span>(val == a[p].val)&#123;</span><br><span class="line">        a[p].cnt++,Update(p);<span class="comment">//副本加1；重新计算子树大小；</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果小了；</span></span><br><span class="line">    <span class="comment">//根据定义，往左走；</span></span><br><span class="line">    <span class="keyword">if</span>(val &lt; a[p].val)&#123;</span><br><span class="line">        Insert(a[p].l,val);</span><br><span class="line">        <span class="keyword">if</span>(a[p].dat &lt; a[a[p].l].dat)zip(p);</span><br><span class="line">        <span class="comment">//重点，如果加入的节点在左，为了使树更加平衡（因为此时左子树may大于右子树），我们需要将当前节点变为当前节点的左节点的右子树；这就是旋转操作；这是为了防止树退化成链的情况。</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Insert(a[p].r,val);</span><br><span class="line">        <span class="keyword">if</span>(a[p].dat &lt; a[a[p].r].dat)zap(p);<span class="comment">//同理;</span></span><br><span class="line">    &#125;</span><br><span class="line">    Update(p);<span class="comment">//回溯时重新计算经过的节点的size；</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//找前驱</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetPre</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;<span class="comment">//a[1].val == -INF</span></span><br><span class="line">    <span class="keyword">int</span> p = root;</span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(val == a[p].val)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[p].l &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                p = a[p].l;</span><br><span class="line">                <span class="keyword">while</span>(a[p].r &gt; <span class="number">0</span>)p = a[p].r;</span><br><span class="line">                ans = p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a[p].val &lt; val <span class="keyword">and</span> a[p].val &gt; a[ans].val)ans = p;</span><br><span class="line">        p = val &lt; a[p].val ? a[p].l : a[p].r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a[ans].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后继同理</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetNext</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">2</span>;<span class="comment">//a[2].val = INF;</span></span><br><span class="line">    <span class="keyword">int</span> p = root;</span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(val == a[p].val)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[p].r &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                p = a[p].r;</span><br><span class="line">                <span class="keyword">while</span>(a[p].l &gt; <span class="number">0</span>)p = a[p].l;</span><br><span class="line">                ans = p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a[p].val &gt; val <span class="keyword">and</span> a[p].val &lt; a[ans].val)ans = p;</span><br><span class="line">        p = val &lt; a[p].val ? a[p].l : a[p].r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a[ans].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Remove</span><span class="params">(<span class="keyword">int</span> &amp;p,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="number">0</span>)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(val == a[p].val)<span class="comment">//查到了val；</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[p].cnt &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            a[p].cnt--,Update(p);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a[p].l <span class="keyword">or</span> a[p].r)&#123;<span class="comment">//不是叶子节点，就将当前节点向下旋转，这是为了不让子树受到不必要的影响（可能删去后接上时不满足BST的基本结构）；</span></span><br><span class="line">            <span class="keyword">if</span>(!a[p].r <span class="keyword">or</span> a[a[p].l].dat &gt; a[a[p].r].dat)</span><br><span class="line">                <span class="comment">//如果右子树不为空，或左子树的权值比右子树大；</span></span><br><span class="line">                zip(p),Remove(a[p].r,val);<span class="comment">//右旋；</span></span><br><span class="line">            <span class="keyword">else</span> zap(p),Remove(a[p].l,val);<span class="comment">//反之，左旋；</span></span><br><span class="line">            Update(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> p = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    val &lt; a[p].val ? Remove(a[p].l,val) : Remove(a[p].r,val);</span><br><span class="line">    <span class="comment">//同插入；</span></span><br><span class="line">    Update(p);<span class="comment">//计算子树大小；</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    srand(time(<span class="literal">NULL</span>));</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    build();</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> kmp = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="keyword">int</span> opt,x;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; opt &gt;&gt; x;</span><br><span class="line">        <span class="keyword">if</span>(opt == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            kmp ++;</span><br><span class="line">            Insert(root,x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(opt == <span class="number">2</span>)Remove(root,x);</span><br><span class="line">        <span class="keyword">if</span>(opt == <span class="number">3</span>)<span class="built_in">cout</span> &lt;&lt; GetRankByVal(root,x) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">if</span>(opt == <span class="number">4</span>)<span class="built_in">cout</span> &lt;&lt; GetValByRank(root,x+<span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">if</span>(opt == <span class="number">5</span>)<span class="built_in">cout</span> &lt;&lt; GetPre(x) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">if</span>(opt == <span class="number">6</span>)<span class="built_in">cout</span> &lt;&lt; GetNext(x) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//for(int i = 1 ; i &lt;= kmp ; ++ i)</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; a[i].val &lt;&lt; "," &lt;&lt; a[i].l &lt;&lt; "," &lt;&lt; a[i].r &lt;&lt; endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//同时感谢海波大佬在我旁边给我的帮助。</span></span><br></pre></td></tr></table></figure></p><p>可能我后面有些没有写注释了，恳请原谅，最近实在是太忙了。</p><p>感谢提供帮助的海波大佬(<a href="https://www.luogu.org/space/show?uid=91252" target="_blank" rel="noopener">$\color{skyblue}Na2S2O3$</a>)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;div class=&quot;image&quot; style=&quot;background-image:url(https://ws2.sinaimg.cn/large/0072Vf1pgy1fodqiemqvoj31hc0xcaxb.jpg)&quot;&gt;&lt;/div&gt;&lt;br&gt;treap模板&lt;br&gt;
    
    </summary>
    
      <category term="模板" scheme="http://yoursite.com/categories/%E6%A8%A1%E6%9D%BF/"/>
    
    
      <category term="平衡树" scheme="http://yoursite.com/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>NOIP反省与分析</title>
    <link href="http://yoursite.com/2018/12/17/NOIP%E5%8F%8D%E7%9C%81%E4%B8%8E%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2018/12/17/NOIP反省与分析/</id>
    <published>2018-12-17T04:22:29.000Z</published>
    <updated>2019-03-06T11:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="image" style="background-image:url(https://ws2.sinaimg.cn/large/006ZFECEgy1fr1x6du570j31hc0u0aqc.jpg)"></div><h3 id="color-red-NOIP2018-反省与分析"><a href="#color-red-NOIP2018-反省与分析" class="headerlink" title="$\color{red}{NOIP2018}$反省与分析"></a><a href="https://www.luogu.org/blog/yzp2846799957/noip-you-ji-tui-yi-ji-post" target="_blank" rel="noopener">$\color{red}{NOIP2018}$</a><a href="https://www.luogu.org/blog/yzp2846799957/noip-fan-xing-yu-fen-xi" target="_blank" rel="noopener">反省与分析</a></h3><h4 id="关于本次-color-red-NOIP-的一点总结"><a href="#关于本次-color-red-NOIP-的一点总结" class="headerlink" title="关于本次$\color{red}{NOIP}$的一点总结"></a>关于本次$\color{red}{NOIP}$的一点总结</h4><p>先总结一下自己这次$\color{red}{NOIP}$做的好的一点吧。</p><p>这次$\color{red}{NOIP}$是抱着平常心态去考的，虽然其中出现了很多的障碍，但是心态保持的很好，没有出现什么心态爆炸。可以说这是我相对发挥不错的一次了。</p><a id="more"></a><p>但是从中也体现了我的很多不足，最重要的就是知识储备问题，所以这次考这个分数我一点都不冤枉，当时考前也是抱着侥幸的心理，认为联赛不会考什么什么知识点，学的也是一塌糊涂，很多知识点都是屈老师强调过的，比如说$\color{blue}dp$<del>(钻进地洞)</del>，考前一知半解，考场上自然就打不出来。感谢这次考试，让我看到了自己的不足。</p><h3 id="今后"><a href="#今后" class="headerlink" title="今后"></a>今后</h3><p>我要踏踏实实的学习$OI$，认认真真的学习每一个知识点。为下次考试做好准备（当然文化也不能落下）</p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;image&quot; style=&quot;background-image:url(https://ws2.sinaimg.cn/large/006ZFECEgy1fr1x6du570j31hc0u0aqc.jpg)&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;color-red-NOIP2018-反省与分析&quot;&gt;&lt;a href=&quot;#color-red-NOIP2018-反省与分析&quot; class=&quot;headerlink&quot; title=&quot;$\color{red}{NOIP2018}$反省与分析&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.luogu.org/blog/yzp2846799957/noip-you-ji-tui-yi-ji-post&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;$\color{red}{NOIP2018}$&lt;/a&gt;&lt;a href=&quot;https://www.luogu.org/blog/yzp2846799957/noip-fan-xing-yu-fen-xi&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;反省与分析&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&quot;关于本次-color-red-NOIP-的一点总结&quot;&gt;&lt;a href=&quot;#关于本次-color-red-NOIP-的一点总结&quot; class=&quot;headerlink&quot; title=&quot;关于本次$\color{red}{NOIP}$的一点总结&quot;&gt;&lt;/a&gt;关于本次$\color{red}{NOIP}$的一点总结&lt;/h4&gt;&lt;p&gt;先总结一下自己这次$\color{red}{NOIP}$做的好的一点吧。&lt;/p&gt;
&lt;p&gt;这次$\color{red}{NOIP}$是抱着平常心态去考的，虽然其中出现了很多的障碍，但是心态保持的很好，没有出现什么心态爆炸。可以说这是我相对发挥不错的一次了。&lt;/p&gt;
    
    </summary>
    
      <category term="心得" scheme="http://yoursite.com/categories/%E5%BF%83%E5%BE%97/"/>
    
    
  </entry>
  
  <entry>
    <title>NOIP游记</title>
    <link href="http://yoursite.com/2018/12/15/NOIP%E6%B8%B8%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/12/15/NOIP游记/</id>
    <published>2018-12-15T14:14:04.000Z</published>
    <updated>2019-03-06T11:45:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="image" style="background:url(https://ws4.sinaimg.cn/large/0072Vf1pgy1foxlned8v0j31kw0w01j3.jpg)"></div><h3 id="color-Blue-NOIP-退役记"><a href="#color-Blue-NOIP-退役记" class="headerlink" title="$\color{Blue}{NOIP}$退役记"></a>$\color{Blue}{NOIP}$退役记</h3><p>关于本次的$NOIP$心里都是悔恨。。。。。（文件名都打错了）；</p><ul><li>考前</li></ul><p>蒟蒻的我是最后一批停课的（果然还是太菜了），<del>但还是因此逃过了期中考试</del>然后接下来就是各种各样的集训，每天就是上午写题，下午改题，晚上接着考。感觉自己经历了绝望，看着自己不忍入目的分数与大佬的神仙成绩，感觉$NOIP$凉了。</p><a id="more"></a><ul><li>$day0:$</li></ul><p>考前看了看基础算法的模板，复习复习<del>（然而貌似并没有什么用）</del>晚上睡得很香呢 ^ _ ^</p><ul><li>$day1:$</li></ul><p>首先浪费了半个小时调配置。</p><p>调完后猛然发现无法解压文件（好方）最后找监考老师用他的U盘重新拷了一份试题才能解压。（不祥的预感）</p><p>第一题这这是什么$???$</p><p>$n^2$不能过？集中生智的把所有数据看了一遍找到了规律（好像是类似差分的一个东西）。（耗了我$20$分钟……最后出考场发现是原题……石化了）</p><p>第二题理解错了题意，花了半个小时改，发现错了（以为是小凯的疑惑，发现过不了大样例<del>心情简单</del> <del>才怪</del>）。</p><p>于是开始重码代码，码了一个玄学的筛法(本来想打完全背包(有个小细节不会处理))。后来测试还过了。（开心）</p><p>第三题看了后感觉可能是树形dp+二分答案（然而树形$dp$不会打）（$qwq$）</p><p>第一天总体感觉还好吧。除了最后一题的骗分外，其他题的的总体发挥还是令我蛮满意的。</p><ul><li>$day2$</li></ul><p>第一题最开始觉得还蛮简单，以为一通暴搜加贪心就可以了，结果看了数据后发现不对劲$(m = n - 1)???$那不是树了吗？<br>在往下滑发现$(m = n)$，舒了口气。以为上面的树的情况是部分分。结果考完后别人告诉我是基树环。…………</p><p>第二题看了后以为是数论（事实上在标程出来之前都没推出来……）<br>花了我考场珍贵的两小时在上面，结果不仅没推出来，文件名也没检查，然后你懂得。。</p><p>没有第三题了…………</p><p>第二天是真的炸了，主要还是自己好多知识的储备还不够，回去后要好好反省这次考试了。</p><p>总体的情况还算正常。感觉自己最近有点过多关注这次考试成绩了<del>（能不关心吗??）</del></p><p>总之已经考完了<del>（考后当然该大颓一波）</del>考完后看了看柯南，震惊与安室透的飙车技术，看到最后突然想起这次$NOIP$提高组考凉了……</p><p>写完这个后我就不再谈这次考试成绩了。分析与反省比成绩单上的数字更重要，好好学习才是接下来我该做的。<del>想到还有一堆作业等着我</del></p><p><a href="https://www.luogu.org/blog/yzp2846799957/noip-fan-xing-yu-fen-xi" target="_blank" rel="noopener">$\color{blue}{NOIP}$反省与总结</a></p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;image&quot; style=&quot;background:url(https://ws4.sinaimg.cn/large/0072Vf1pgy1foxlned8v0j31kw0w01j3.jpg)&quot;&gt;&lt;/div&gt;


&lt;h3 id=&quot;color-Blue-NOIP-退役记&quot;&gt;&lt;a href=&quot;#color-Blue-NOIP-退役记&quot; class=&quot;headerlink&quot; title=&quot;$\color{Blue}{NOIP}$退役记&quot;&gt;&lt;/a&gt;$\color{Blue}{NOIP}$退役记&lt;/h3&gt;&lt;p&gt;关于本次的$NOIP$心里都是悔恨。。。。。（文件名都打错了）；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;考前&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;蒟蒻的我是最后一批停课的（果然还是太菜了），&lt;del&gt;但还是因此逃过了期中考试&lt;/del&gt;然后接下来就是各种各样的集训，每天就是上午写题，下午改题，晚上接着考。感觉自己经历了绝望，看着自己不忍入目的分数与大佬的神仙成绩，感觉$NOIP$凉了。&lt;/p&gt;
    
    </summary>
    
      <category term="心得" scheme="http://yoursite.com/categories/%E5%BF%83%E5%BE%97/"/>
    
    
  </entry>
  
  <entry>
    <title>尚未完成的知识点</title>
    <link href="http://yoursite.com/2018/12/15/%E6%9C%AA%E5%AE%8C%E6%88%90/"/>
    <id>http://yoursite.com/2018/12/15/未完成/</id>
    <published>2018-12-15T11:17:33.000Z</published>
    <updated>2019-03-06T11:05:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><div class="image" style="background-image:url(https://ws4.sinaimg.cn/large/0072Vf1pgy1foxkic3ld0j31hc0u07rx.jpg)"></div><br>$HLPP$学习，$fhq-treap$学习，$splay$学习，FFT学习，莫队，主席树，可持久化trie树，虚树，莫比乌斯反演</p><p>费用流练习，分块练习， 概率期望，费用流(Dinic版)，CDQ分治，基环树<br><a id="more"></a></p><p>$treap$巩固，树型$dp$巩固，数位$dp$巩固，博弈论巩固，高斯消元巩固，KMP巩固，$tarjan$巩固，负环与差分约束巩固，割点和桥巩固，$RMQ$巩固，同余方程巩固，组合数学巩固，$Dinic$巩固，单调栈/队列练习，树链剖分，LCT</p><p>复习：</p><p>区间$dp$，状压$dp%$，$Trie$字典树，并查集，线段树，树状数组，矩阵乘法，倍增，图的遍历，二分图，$hash$</p><p>慢慢填坑吧。</p><p>加油，日积月累的你一定能成功。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;div class=&quot;image&quot; style=&quot;background-image:url(https://ws4.sinaimg.cn/large/0072Vf1pgy1foxkic3ld0j31hc0u07rx.jpg)&quot;&gt;&lt;/div&gt;&lt;br&gt;$HLPP$学习，$fhq-treap$学习，$splay$学习，FFT学习，莫队，主席树，可持久化trie树，虚树，莫比乌斯反演&lt;/p&gt;
&lt;p&gt;费用流练习，分块练习， 概率期望，费用流(Dinic版)，CDQ分治，基环树&lt;br&gt;
    
    </summary>
    
    
      <category term="学习备忘录" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>[洛谷]过河</title>
    <link href="http://yoursite.com/2018/12/13/%E6%B4%9B%E8%B0%B7-%E8%BF%87%E6%B2%B3/"/>
    <id>http://yoursite.com/2018/12/13/洛谷-过河/</id>
    <published>2018-12-13T13:35:00.000Z</published>
    <updated>2019-03-06T11:45:56.000Z</updated>
    
    <content type="html"><![CDATA[<div class="image" style="background:url(https://ws1.sinaimg.cn/large/0072Vf1pgy1foxk6ybqjfj31hc0u047b.jpg)"></div><p>题面传送门：</p><p><a href="https://www.luogu.org/problemnew/show/P1052" target="_blank" rel="noopener">$Luogu$</a><br>基本的思路很简单：</p><p>第一眼看这题的同学应该首先立即就会想到动规吧。<del>（显而易见）</del></p><a id="more"></a><p>因为它满足无后效性。</p><p>当前的每一个状态都可以由之前的状态转移过来。</p><p>当前的决策对之后都不会产生影响。</p><p>$\color{blue}{But}$动态规划最重要的就是状态转移方程。</p><p>恩，经过一段思考我们不难得出以下几条结论：</p><ol><li><p>当前的点$i$只与它前$i-j$个点有关($s\leq j\leq t$)</p></li><li><p>如果当前的点是石头那么就是所有到达该点的位置所需踩的最少石头数加$1$</p></li></ol><p>经过上述的分析我们就可以得出我们的状态转移方程了：</p><ul><li><p>该点为石头：<br>$dp[i] = min(dp[i],dp[i-j] +1)(s\leq j\leq t)$</p></li><li><p>该点不为石头：<br>$dp[i] = min(dp[i],dp[i-j])(s\leq j\leq t)$</p></li></ul><p>分析到这好像差不多了。</p><p>等等！</p><p>当我们猛然看到数据范围时就会发现这题没有这么简单：<br>$L\leq 10^9$</p><p>这么大的数据范围用数组存肯定存不下。</p><p>但是我们却惊奇发现石头数很小。</p><p>怎么办呢？先让我们来看看这张图：</p><p><img src="https://cdn.luogu.org/upload/pic/42022.png" alt=""><br>其中$[S_i,T_i]$就是青蛙可以到的区间。<br>可以发现当$\color{Red}{\textbf{s &lt; t}}$时，<br>$s$和$t$一定会重合（当距离为$lcm(s,t)$即$s$，$t$的最小公倍数时）<br>而这以后的每个点都可以到达，<br>所以我们只需将每两个石头超过 $s\times t$ 的距离缩成$s \times t$就可以了当然如果你有疑虑的话也可以开大一点。</p><p>当$s = t$时我们只需枚举每个石头的坐标是否为$s$的倍数即可。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">150</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxl = <span class="number">300</span> * <span class="number">105</span>;</span><br><span class="line"><span class="comment">//其实开90 * 105就可以了；</span></span><br><span class="line"><span class="keyword">int</span> L,s,t,m,stone[maxn],a[maxn],dp[maxl],base;</span><br><span class="line"><span class="comment">//stone就是石头的初始位置；a为我们将石头初始化后的石头位置；</span></span><br><span class="line"><span class="keyword">bool</span> vis[maxl];</span><br><span class="line"><span class="comment">//标记一下坐标上的该点是否为石头；</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//  关掉同步，加快cin的速度</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; L;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s &gt;&gt; t &gt;&gt; m;</span><br><span class="line">    base = s * t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= m ; ++ i)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; stone[i];</span><br><span class="line">    sort(stone + <span class="number">1</span>,stone + <span class="number">1</span> + m);</span><br><span class="line"><span class="comment">//  判段s == t的情况</span></span><br><span class="line">    <span class="keyword">if</span>(s == t)&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= m ; ++ i)</span><br><span class="line">            <span class="keyword">if</span>(stone[i] % s == <span class="number">0</span>)cnt++;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; cnt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= m ; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="comment">//      离散化过程</span></span><br><span class="line">        <span class="keyword">int</span> d = stone[i] - stone[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(d &gt;= base)d = base;</span><br><span class="line">        a[i] = a[i - <span class="number">1</span>] + d;</span><br><span class="line">        vis[a[i]] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    L = a[m] + base;</span><br><span class="line"><span class="comment">//  将L变成最后一个石头的位置+s*t</span></span><br><span class="line"><span class="comment">//  如果L - a[m] &gt;= s * t就缩成s * t</span></span><br><span class="line"><span class="comment">//  如果L - a[m] &lt;= s * t就加上一个数使得它等于这个距离因为青蛙可能跳出独木桥</span></span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0x7f</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//  初始化到原点寻最少踩0个石头</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= L ; ++ i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = s ; j &lt;= t ; ++ j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i - j &gt;= <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(vis[i])dp[i] = min(dp[i - j] + <span class="number">1</span>,dp[i]);</span><br><span class="line">                <span class="keyword">else</span> dp[i] = min(dp[i - j],dp[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = maxn;</span><br><span class="line"><span class="comment">//  给答案赋一个较大的初值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = a[m] ; i &lt;= L ; ++ i)</span><br><span class="line">        ans = min(ans,dp[i]);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;image&quot; style=&quot;background:url(https://ws1.sinaimg.cn/large/0072Vf1pgy1foxk6ybqjfj31hc0u047b.jpg)&quot;&gt;&lt;/div&gt;

&lt;p&gt;题面传送门：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P1052&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;$Luogu$&lt;/a&gt;&lt;br&gt;基本的思路很简单：&lt;/p&gt;
&lt;p&gt;第一眼看这题的同学应该首先立即就会想到动规吧。&lt;del&gt;（显而易见）&lt;/del&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="动态规划,动规,dp" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E5%8A%A8%E8%A7%84-dp/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/12/13/Hello-World/"/>
    <id>http://yoursite.com/2018/12/13/Hello-World/</id>
    <published>2018-12-13T11:30:55.000Z</published>
    <updated>2019-03-06T11:17:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><div class="image" style="background-image:url(https://ws4.sinaimg.cn/large/006ZFECEgy1fr1x6j5pd0j31hc0u04qp.jpg)"><div></div></div></p><h1 id="Welcome-to-my-blog"><a href="#Welcome-to-my-blog" class="headerlink" title="Welcome to my blog!"></a>Welcome to my blog!</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello World!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; &#125;</span><br></pre></td></tr></table></figure><h2 id="感谢-color-red-zqr-大佬和-color-skyblue-Na2S2O3-的帮助，才使得我顺利搭建起了这个博客"><a href="#感谢-color-red-zqr-大佬和-color-skyblue-Na2S2O3-的帮助，才使得我顺利搭建起了这个博客" class="headerlink" title="感谢$\color{red}{zqr}$大佬和$\color{skyblue}{Na2S2O3}$的帮助，才使得我顺利搭建起了这个博客"></a>感谢$\color{red}{zqr}$大佬和$\color{skyblue}{Na2S2O3}$的帮助，才使得我顺利搭建起了这个博客</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;div class=&quot;image&quot; style=&quot;background-image:url(https://ws4.sinaimg.cn/large/006ZFECEgy1fr1x6j5pd0j31hc0u04qp.jpg)&quot;&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
</feed>
